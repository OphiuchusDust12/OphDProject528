<!--
 - Created by arnab.karsarkar on 4/4/2017.
 -->

<apex:page id="KnownIssueScoreReportPage" sideBar="false" controller="KnownIssueScoreReportController" standardStylesheets="false" showHeader="true" title="Known Issue Report">
    <apex:includeScript value="{!URLFOR($Resource.inContactResource, '/inContactResource/js/jquery-3.1.1.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/js/kendo.all.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.inContactResource, '/inContactResource/js/bootstrap.min.js')}"/>


    <apex:stylesheet value="{!URLFOR($Resource.inContactResource, '/inContactResource/css/bootstrap.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.inContactResource, '/inContactResource/css/bootstrap-theme.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.common.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.rtl.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.default.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.silver.min.css')}"/>

    <apex:form >
        <div class="container-fluid" style="padding-left: 0px;">
            <div class="page-header">
                <h1>Known Issue DashBoard</h1>
            </div>
            <div class="row">
                <div class ="col-md-10">
                    <div class="alert alert-danger" role="alert" id="errorAlert" style="display:none;">
                    </div>
                </div>
                <div class ="col-md-2" style="padding-right:0px;">
                    <div style="float:right;">
                        <apex:outputPanel id="lastLoadDate" >
                            <apex:outputLabel >Last Update : {!currentDateTime}</apex:outputLabel>
                        </apex:outputPanel>
                    </div>
                </div>
            </div>
            <div class="row">
                <div style="float:right;">
                    <apex:commandButton styleClass="btn button-edit" rerender="lastLoadDate" action="{!refreshDateTime}" onclick="setupSearchGrid();" value="Refresh"/>
                </div>
                <div class="panel panel-info hiddenClass" style="width:60%" id="filterPanel">
                    <div class="panel-heading" >
                        <div class="row">
                            <div class ="col-sm-1" style="padding-right:0px;">
                                Filters Applied:
                            </div>
                            <div class ="col-sm-10">
                                <ul class="inline-list" id="filterlists">

                                </ul>
                            </div>
                            <div class ="col-sm-1">
                                <a href="" onclick="clearFilter()" style="float:right;cursor:pointer;">Clear All</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <label class="switch">
                <input id="tfsClosed" type="checkbox" value="tfsClosed" data-toggle="toggle" class="custom-control-input" onClick="toggleTFSStatus(this);" checked="true"/>
                <div class="slider round"></div>
            </label>
            <span style="font-size:12px; font-weight:600;">Show JIRA Closed Items</span>
            <div class="row">
                <div id="kIGrid"></div>
            </div>
            <!-- Information Modal -->
            <div class="modal fade" id="info" tabindex="-1" role="dialog" aria-labelledby="info" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="infolabel">Account Details For Known Issue - <span id="knownIssueId"/></h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body" style="font-size:14px;" id="infoModal">
                            <div class="panel panel-info">
                                <div class="panel-heading">
                                    Total Account Contract Value(ACV) (in Million) : <span id="ASV" style="font-weight:bold;"></span>
                                </div>
                            </div>

                            <div id="kiAcctDetails"></div>

                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn button-cancel" data-dismiss="modal" style="color:black !important;">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </apex:form>
    <script>
        $(document).ready(function(e){
            setupSearchGrid();

        });

        function bindFilterEvent(){
             var grid = $("#kIGrid").data("kendoGrid");
            grid.dataSource.originalFilter = grid.dataSource.filter;
            grid.dataSource.filter = function(e) {
                // If a column is about to be filtered, then raise a new "filtering" event.
                if (arguments.length > 0) {
                        this.trigger("filtering", [e, $(this)]);
                }
                // Call the original filter function.
                var result = grid.dataSource.originalFilter.apply(this, arguments);
                return result;
            }
            // Bind to the dataSource filtering event.
            $("#kIGrid").data("kendoGrid").dataSource.bind("filtering", function(event) {
              if(event[0] != null){
                  $("ul#filterlists").empty();
                  var filters = event[0]["filters"];
                  if(typeof filters == 'undefined'){
                      	if(typeof event[0]["field"] != 'undefined'){


                                      var field = GETFieldNames(event[0]["field"]);
                                      var operators =  GetOperatorNames(event[0]["operator"]);
                                      var val =   event[0]["value"];
                                      var filterString = '<li class="filterList" ><span> ' + field + ' ' +  operators + '  <b>' + val +
                                                         '</b></span></li>';
                                 $("#filterPanel").removeClass('hiddenClass');
                                 $("ul#filterlists").append(filterString);
                        }
                  		else{
                        $("#filterPanel").addClass('hiddenClass');

                        }
                  	return;
                  }

                  var filterString = '';
                  for(var i = 0; i < filters.length; ++i){
                      var field = GETFieldNames(filters[i]["field"]);
                      var operators =  GetOperatorNames(filters[i]["operator"]);
                      var val =   filters[i]["value"];
                      filterString += '<li class="filterList" ><span> ' + field + ' ' +  operators + '  <b>' + val +
                                         '</b></span></li>';
                  }
                 if(filterString.length > 1){
                     $("#filterPanel").removeClass('hiddenClass');
                    $("ul#filterlists").append(filterString);
                 }
                 else{
                       $("#filterPanel").addClass('hiddenClass');
                 }

              }
              else{
                   $("#filterPanel").addClass('hiddenClass');
              }
            });
        }

        function GetOperatorNames(operator){
            switch (operator){
                case 'contains' :
                    return 'Contains';
                    break;
                case 'eq' :
                     return 'is Equal To';
                     break;
                case 'neq' :
                     return 'is Not Equal To';
                     break;
                case 'lt' :
                     return 'is Less Than';
                     break;
                case 'gt' :
                     return 'is Greater Than';
                     break;
                case 'gte' :
                     return 'is Greater Than or Equal to';
                     break;
                case 'lte' :
                     return 'is Less Than or Equal to';
                     break;
                case 'isnotnull' :
                     return 'is Not Equal to';
                     break;
                default :
                      return ' Is Equal To ';
            }

        }

        function GETFieldNames(fieldName){
            switch (fieldName){
                case 'KINum' :
                    return 'KI#';
                    break;
                case 'JIRAId' :
                     return 'JIRA Id';
                     break;
                case 'subject' :
                     return 'Subject';
                     break;
                case 'status' :
                     return 'KI Status';
                     break;
                case 'team' :
                     return 'Team';
                     break;
                case 'JIRAStatus' :
                     return 'JIRA Status';
                     break;
                case 'priority' :
                     return 'Priority';
                     break;
                case 'age' :
                     return 'Age';
                     break;
                 case 'JIRAIteration' :
                     return 'Iteration';
                     break;
                default :
                      return fieldName;
            }

        }


       function clearFilter(){
            var grid = $("#kIGrid").data("kendoGrid");
           if(grid){
               grid.dataSource.filter({});
           		$('#tfsClosed').prop( "checked" , true );
               }

       }

       function toggleTFSStatus(obj){
          var grid = $("#kIGrid").data("kendoGrid");
           if(!obj.checked){
                grid.dataSource.filter({
                 field: "JIRAStatus",
                 operator: "neq",
                 value:"Closed"
                });

           }
           else{
                 grid.dataSource.filter({});
           }


       }

        var records = '';

        function setupSearchGrid(){
            clearFilter();
            var kiDataSource =new kendo.data.DataSource({
                    autosync:true,
                    transport:{
                    read: function(options){
                       	   KnownIssueScoreReportController.GetKnownIssues(
                                     function(result,event){
                                          if (event.status) {
                                              records = JSON.parse(result);
                                             // console.log('records => ' + JSON.stringify(records));
                                              options.success(records.KIDataItems);
                                            } else if (event.type === 'exception') {
                                                console.log('exception => ' + event.message);
                                                $("div#errorAlert").css({"display":"block"});
                                                $("div#errorAlert").html('Cannot load the table. Please contact Sys admins. The error message says - <strong>' + event.message + '</strong>');
                                            } else {
                                                  $("div#errorAlert").css({"display":"block"});
                                                 $("div#errorAlert").html('Cannot load the table. Please contact Sys admins. The error message says - <strong>' + event.message + '</strong>');
                                            }
                                      },
                                      {escape: false}
                               );
                           }
                    },
                    schema:{
                        model: {
                            id: "Id",
                            fields: {
                                Id : {from: "KICaseId", type: "string" },
                                KINum: { from: "KINumber", type: "string" },
                                JIRAId: { from: "KIJIRAId", type: "string" },
                                subject: { from: "KISubject", type: "string"},
                                status: { from: "KIStatus", type: "string" },
                                score: { from: "KIScore", type: "number" },
                                team: { from: "KIJIRATeam", type: "string" },
                                JIRAStatus: { from: "KIJIRAStatus", type: "string" },
                                createdDate: { from: "KIFormattedCreatedDt", defaultValue: "", type: "string" },
                                age: { from: "KIAge", defaultValue: "", type: "number" },
                                JIRAIteration: { from: "KIJIRAIteration", defaultValue: "", type: "string" },
                                ASV: { from: "KIASVValue", defaultValue: "", type: "number" },
                                incidentCount: { from: "KINumOfIncidents", type: "number" },
                                priority: { from: "KIPriority", type: "string" },
                                JIRALink :{from: "KIJIRALink", type: "string" },
                                scoreChange :{from : "KIScoreChange", type:"string", defaultValue:"NoChange"}
                        }
                    }
                  },
                sort: [
                        { field: "score", dir: "desc" }
                      ],
            	pageSize: 100
            });

            $("div#errorAlert").css({"display":"none"});
    	    $("#kIGrid").kendoGrid({
                dataSource: kiDataSource,
                scrollable: true,
                sortable: true,
                resizable: true,
                filterable: {
                           extra: false,
                           operators: {
                                  string: {
                                        contains: "Contains",
                                        eq: "Is equal to",
                                        neq: "Is not equal to"
                                  }
                           }
                         },
            	pageable: {
                    refresh: false,
                    pageSizes: false,
                    buttonCount: 5
                  },
                  dataBound: onDataBind,
                  height : 550,
                  columns: [{
                                field:"KINum",
                                title : "KI",
                                template: '#{ #<a href="/#: Id #" target="_blank" >#= KINum #</a># } #',
                                filterable :
                                {
                                    ui: filterKI
                                }
                            },
                            {
                                field: "JIRAId",
                                title:"JIRA Id",
                                template: '#{ #<a href="#: JIRALink #" target="_blank" >#= JIRAId != null? JIRAId : "" #</a># } #',
                                filterable :
                                {
                                    ui: filterTfsId
                                }


                            },
                            {
                                field: "subject",
                                title:"Subject",
                                width: 400,
                                filterable :
                                {
                                    ui: filterSubject
                                }
                            },
                            {
                              field: "status",
                              title: "KI Status",
                                filterable :
                                {
                                    ui: filterKIStatus
                                }
                            },
                            {
                                field:"score",
                                title:"Score",
                                template: '<a href="" onClick="OpenModal(this); return false;" style="text-decoration: underline;">#= score != null? score : "" #</a>',
                                filterable:false
                            },
                            {
                                field:"team",
                                title:"Team",
                                filterable :
                                {
                                    ui: filterTeam
                                }
                            },
                            {
                                field: "priority",
                                title: "Priority",
                                filterable :
                                {
                                    ui: filterPriority
                                }
                            },
                            {
                                field:"JIRAStatus",
                                title : "JIRA Status",
                                filterable :
                                {
                                    ui: filterTfsStatus,
                                    extra:true
                                }
                            },
                            {
                                field: "createdDate",
                                title:"Created",
                                filterable:false,
                                sortable:false

                            },
                            {
                                field: "age",
                                title:"Age"
                            },
                            {
                                field:"JIRAIteration",
                                title:"Iteration",
                                 filterable :
                                {
                                    ui: filterTfsIteration
                                }
                            }
                  ]
            });

            bindFilterEvent();
          }

     function onDataBind(e){
        var rows = e.sender.tbody.children();
        for (var j = 0; j < rows.length; j++) {
            var row = $(rows[j]);
            var dataItem = e.sender.dataItem(row);
            var Priority = dataItem.get("priority");
            if (Priority == 'P1'){
                row.addClass("HiglightPriority");
            }
            if (Priority == 'P2'){
                row.addClass("MediumPriority");
            }
            var createdDate = dataItem.get("createdDate");
            var isToday = checkDate(createdDate)
            if (isToday == true){
                row.addClass("newItemOnList");
            }
            var ScoreChange = dataItem.get("scoreChange");
            var scoreCell = row.children().eq(4);
            if(ScoreChange == 'Up')
                $( scoreCell ).append( "<span class='glyphicon glyphicon-triangle-top' style='color:red; padding-left: 3px;'/>" );
            else if(ScoreChange == 'Down')
                 $( scoreCell ).append( "<span class='glyphicon glyphicon-triangle-bottom'  style='color:green; padding-left: 3px;'/>" );

        }
    }

     function filterPriority(element){

          console.log(JSON.stringify(element));

             element.kendoAutoComplete({
                       dataSource: ['P1', 'P2', 'P3', 'P4']
            });

     }

     function filterKI(element){

          console.log(JSON.stringify(element));

             element.kendoAutoComplete({
                       dataSource: {
                       serverFiltering:true,
                      transport:{
                      read: function(e){
                           value = "00" + $(element).val();
                          console.log('value =>' + value);
                               var result =  GetFilter(value, "KI", e);

                            }
                       },

                    schema: {
                        model: {
                            id: "value",
                            fields: {
                                value: {type: "string"}
                            }
                        }
                    }
                    }
            });

     }


      function filterTfsIteration(element){

          console.log(JSON.stringify(element));

             element.kendoAutoComplete({
                      dataSource: {
                      serverFiltering:true,
                      transport:{
                      read: function(e){
                           value = $(element).val();
                          console.log('value =>' + value);
                               var result =  GetFilter(value, "Iteration", e);
                            }
                       },
                    schema: {
                        model: {
                            id: "value",
                            fields: {
                                value: {type: "string"}
                            }
                        }
                    }
                    }
            });

     }



     function filterTfsId(element){

          console.log(JSON.stringify(element));

             element.kendoAutoComplete({
                       dataSource: {
                       serverFiltering:true,
                      transport:{
                      read: function(e){
                           value = $(element).val();
                          console.log('value =>' + value);
                               var result =  GetFilter(value, "TFS Id", e);

                            }
                       },

                    schema: {
                        model: {
                            id: "value",
                            fields: {
                                value: {type: "string"}
                            }
                        }
                    }
                    }
            });

     }

     function filterSubject(element){

          console.log(JSON.stringify(element));

             element.kendoAutoComplete({
                       dataSource: {
                       serverFiltering:true,
                      transport:{
                      read: function(e){
                           value = $(element).val();
                          console.log('value =>' + value);
                               var result =  GetFilter(value, "Subject", e);

                            }
                       },

                    schema: {
                        model: {
                            id: "value",
                            fields: {
                                value: {type: "string"}
                            }
                        }
                    }
                    }
            });

     }

     function filterKIStatus(element){

          console.log(JSON.stringify(element));

             element.kendoAutoComplete({
                       dataSource: {
                       serverFiltering:true,
                      transport:{
                      read: function(e){
                           value = $(element).val();
                          console.log('value =>' + value);
                               var result =  GetFilter(value, "KI Status", e);

                            }
                       },

                    schema: {
                        model: {
                            id: "value",
                            fields: {
                                value: {type: "string"}
                            }
                        }
                    }
                    }
            });

     }

     function filterTeam(element){

          console.log(JSON.stringify(element));

             element.kendoAutoComplete({
                       dataSource: {
                       serverFiltering:true,
                      transport:{
                      read: function(e){
                           value = $(element).val();
                          console.log('value =>' + value);
                               var result =  GetFilter(value, "Team", e);

                            }
                       },

                    schema: {
                        model: {
                            id: "value",
                            fields: {
                                value: {type: "string"}
                            }
                        }
                    }
                    }
            });

     }

     function filterTfsStatus(element){

          console.log(JSON.stringify(element));

             element.kendoAutoComplete({
                       dataSource: {
                       serverFiltering:true,
                      transport:{
                      read: function(e){
                           value = $(element).val();
                          console.log('value =>' + value);
                               var result =  GetFilter(value, "TFS Status", e);

                            }
                       },

                    schema: {
                        model: {
                            id: "value",
                            fields: {
                                value: {type: "string"}
                            }
                        }
                    }
                    }
            });

     }

     function GetFilter(val, field, element){
         var records = '';
            KnownIssueScoreReportController.GetFilterString(
                                    field,
                                    val,
                                      function(result,event)
                                      {

                                          if (event.status) {
                                               records = JSON.parse(result);
                                                element.success(records);
                                              console.log('filter result => ' + JSON.stringify(records));

                                            } else if (event.type === 'exception') {
                                                document.getElementById("java-errors").innerHTML = event.message;

                                            } else {
                                                document.getElementById("java-errors").innerHTML = event.message;
                                            }
                                      },
                                      {escape: false}
                               );

                               return records;
     }

    function checkDate(inputDate){
      var createDate = new Date(inputDate);
      var compareDate = new Date();
      var val =  (createDate.setHours(0,0,0,0) == compareDate.setHours(0,0,0,0));
      return val;
    }

     function OpenModal(sender ){
         var kiId, kiNum, valASV;
        var grid = $('#kIGrid').data('kendoGrid');
        if (grid){
            var data = grid.dataItem($(sender).closest("tr"));
            if (data){
             kiId = data.Id;
             kiNum = data.kiNum;
              valASV = '$' + data.ASV + 'M';
            }
        }

        var accountgrid =  $("#kiAcctDetails").data('kendoGrid');
		if(accountgrid)
         	accountgrid.destroy();

        $("span#ASV").text(valASV );
        $("span#knownIssueId").text(kiNum );

        var accountDataSource = new kendo.data.DataSource({
            		autosync:true,
                    transport:{
                      read: function(options){
                          	   KnownIssueScoreReportController.GetAccounts(
                                      kiId,
                                      function(result,event)
                                      {
                                          if (event.status) {
                                              records = JSON.parse(result);
                                              console.log('Account records => ' + JSON.stringify(records));
                                              options.success(records);
                                            } else if (event.type === 'exception') {
                                                console.log('exception => ' + event.message);
                                                $("div#errorAlert").css({"display":"block"});
                                                $("div#errorAlert").html('Cannot load Accounts. Please contact Sys admins. The error message says - <strong>' + event.message + '</strong>');
                                            } else {
                                                 console.log('exception => ' + event.message);
                                                $("div#errorAlert").css({"display":"block"});
                                                $("div#errorAlert").html('Cannot load Accounts. Please contact Sys admins. The error message says - <strong>' + event.message + '</strong>');
                                            }
                                      },
                                      {escape: false}
                               );
                      }
                   },
                    schema:{
                        model: {
                           id: "Id",
                           fields: {
                                Id : {from: "AccountId", type: "string" },
                                ActName: { from: "AccountName", type: "string" },
                                ActCadeBillNum: { from: "CadeBillNum", type: "number" },
                                ActRecrdTyp: { from: "AccountRecordType", type: "string"},
                                ACV: { from: "ACVValue", type: "number"}
                           }
                        }
                    },
            	pageSize: 10
        });
        $("#kiAcctDetails").kendoGrid({
                dataSource: accountDataSource,
                sortable: true,
                pageable: true,
                columns: [{
                    field: "ActName",
                    title: "Account Name",
                    width: 240
                }, {
                    field: "ActCadeBillNum",
                    title: "Cadebill Account #"
                }, {
                    field: "ActRecrdTyp",
                    title: "Account Type"
                }, {
                    field: "ACV",
                    title: "ACV Value",
                    format: "{0:c}"
                }
                ]
        });

        $('#info').modal('show');
     }
    </script>

    <style>
        .button-cancel{
        padding-left: 1rem !important;
        padding-right: 1rem !important;
        text-align: center;
        vertical-align: middle;
        border: 1px solid rgb(216, 221, 230) !important;
        background-color: rgb(255, 255, 255) !important;
        color: #0275d8 !important;
        display: inline-block;
        height:33px;
        font-weight:200 !importnat;
        font-size : 12px !important;
    }

    ul li, ol li {
    margin-left: 1px;
    }

    li a.k-link{
        background-color: #ceced2;
    }

    tr.HiglightPriority {
        background-color: rgb(220, 175, 175) !important;
    }
    td.HiglightPriority {
       background-color: rgb(220, 175, 175) !important;
    }
    tr.HiglightPriority a {
        color: black !important;
    }
    tr.MediumPriority a {
        color: black !important;
    }
    .newItemOnList{
        background-color: #A9F5A9;
    }

    tr.MediumPriority {
        background-color: #fadf7f !important;
    }
    td.MediumPriority{
        background-color: #fadf7f !important;
    }

    div{
       font-size:11.11px;
        }
	.k-grid td{
    	white-space: nowrap;
    	text-overflow: ellipsis;
	}
    .k-grid table {
   		table-layout: fixed;
	}

	.filterList{
        margin-left: 9px;
        border-color: #357ebd;
        background-color: #428bca;
        color : white;
        border-radius: 4px;
        margin: 1px 0 1px 1px;
        padding: .1em 0.6em .1em .4em;
        border: 1px solid;
        display:inline;
        font-size:14px;
    }

    .hiddenClass{
        display:none;
    }

    ul{
        padding-left : 0px;
    }

    .button-edit {
        padding: 6px 12px !important;
        margin-bottom: 5px !important;
        font-weight: 400;
        color: #fff !important;
        background: none !important;
        background-color: #0275d8 !important;
        border-color: #2e6da4 !important;
        font-size: 12px !important;
        font-weight: 200 !importnat;
    }

     .switch {
      position: relative;
      display: inline-block;
      width: 49px;
      height: 21px;
      vertical-align: middle;
    }

    .switch input {display:none;}

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      -webkit-transition: .4s;
      transition: .4s;
      border-radius: 34px;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 17px;
      width: 17px;
      left: 1px;
      bottom: 2px;
      background-color: white;
      -webkit-transition: .4s;
      transition: .4s;
    }

    input:checked + .slider {
      background-color: #0275d8;
    }

    input:focus + .slider {
      box-shadow: 0 0 1px #0275d8;
    }

    input:checked + .slider:before {
      -webkit-transform: translateX(26px);
      -ms-transform: translateX(26px);
      transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
      border-radius: 34px;
    }

    .slider.round:before {
      border-radius: 50%;
    }
	.page-header {
        padding-bottom: 4px !important;
        margin: 0px 0 1px !important;
        border-bottom: none;
	}
    .page-header h1 {
        font-size: 20px;
        text-decoration: none;
        color: #767474;
        font-family: Segoe UI;
        font-weight: 300;
}

    .row{
        	padding-left: 15px;
        }


    </style>

</apex:page>