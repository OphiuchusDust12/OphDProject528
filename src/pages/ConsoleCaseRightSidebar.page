<apex:page standardController="Case" extensions="ConsoleCaseRightSidebarExtension" showHeader="false" sidebar="false">
    <apex:includeScript value="/support/console/28.0/integration.js"/>
    <apex:includeScript value="/soap/ajax/28.0/connection.js" />
    <apex:stylesheet value="{!URLFOR($Resource.KendoUI, '/styles/kendo.common.min.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource.KendoUI, '/styles/kendo.custom.css')}" />
    <apex:stylesheet value="{!$Resource.SupportConsoleCss}" />
    <apex:includeScript value="{!URLFOR($Resource.KendoUI, '/js/jquery.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.KendoUI, '/js/kendo.web.min.js')}" />
    
    <style type="text/css">
    </style>
    
    <apex:messages styleClass="warning-message" layout="block" />
    <div id="java-errors" style="display:none" class="warning-message"></div>
    <div id="tabstrip">
        <ul>
            <li id="open-tab">Open Cases</li>
            <li id="attachment-tab">Attachments</li>
            <li id="event-log-tab">Event Log</li>
        </ul>
        <!-- ********************* Open cases section ******************* -->
        
        <div class="k-content"> 
            <apex:form id="openCasesForm" style="height:auto;" >
                <div class="filter-container">
                        <div class="filter-label">
                            Queue
                        </div>
                        <div class="filter-value">
                            <apex:selectList style="width:250px;" id="queueList" size="1" value="{!UpdateQueue}">
                                <apex:selectOptions value="{!caseQueues}"/>
                                <apex:actionSupport event="onchange" action="{!SetQueueCookie}" reRender="openCaseList" oncomplete="reloadTab()" />
                            </apex:selectList>
                        </div>
                                <div class="clear-both"></div>
                </div>
                <div class="filter-container">
                        <div class="filter-label">
                            Tech Support Skill
                        </div>
                        <div class="filter-value">
                            <apex:inputField id="tsSkill" style="width:200px;" value="{!caseForFields.TechSupportSkill__c}">
                                
                                <apex:actionSupport event="onchange" action="{!SetQueueCookie}" reRender="openCaseList" oncomplete="reloadTab()" />
                            </apex:inputField>
                        </div>
                                <div class="clear-both"></div>
                </div>
                <apex:outputPanel id="openCaseList">
                    {!CaseCount} record(s)
                    <apex:repeat id="openCaseTable" value="{!SearchCases}" var="sc" >
                        <div class="case-list-container">
                            <div class="case-list-header">
                                <a href="#" style="float:left;" onclick="openCase('{!sc.Id}', '{!sc.CaseNumber}');" >{!sc.CaseNumber} - {!sc.Account.Name} ({!sc.Account.CostGuard_Acct__c})</a>
                                <apex:outputPanel layout="block" styleClass="partner-min verizon" rendered="{!(sc.Account.Billing_Group__c='Verizon')}">
                                    Verizon
                                </apex:outputPanel>
                                <apex:outputPanel layout="block" styleClass="partner-min siemens" rendered="{!(sc.Account.Billing_Group__c='SEN')}">
                                    Siemens
                                </apex:outputPanel>
                                <apex:outputPanel layout="block" styleClass="partner-min platinum" rendered="{!(sc.Account.SalesPartnerMasterAgent__r.PartnerLevel__c='Referral Platinum')}">
                                    Platinum Partner
                                </apex:outputPanel>
                                <div class="clear-both"></div>
                            </div>
                            <div>
                                {!sc.Subject}
                            </div>
                            <div>
                                <div class="priority {!sc.Priority}">
                                    {!sc.Priority}
                                </div>
                                <div style="float:left;padding-left:5px;">
                                    {!sc.Status} - {!sc.RecordType.Name}
                                </div>
                                <div style="float:left;padding-left:5px;">
                                    <apex:repeat value="{!sc.CaseMilestones}" var="cm">
                                            <apex:outputPanel rendered="{!NOT(cm.IsViolated)}">
                                                <div class="">
                                                   - SLA
                                                    {!TEXT(FLOOR((cm.TargetDate-NOW())*24))&" hr"} 
                                                    {!TEXT(FLOOR(MOD((cm.TargetDate-NOW())*24,1)*60))&" min"}
                                                </div>
                                            </apex:outputPanel>
                                            
                                            <apex:outputPanel rendered="{!cm.IsViolated}">
                                                <div class="violated">
                                                    Past SLA
                                                </div>
                                            </apex:outputPanel>
                                    </apex:repeat>
                                </div>    
                                <div class="clear-both"></div>
                            </div>
                        </div>
                    </apex:repeat>
                </apex:outputPanel>
                <apex:actionFunction name="refreshList" reRender="openCaseList"/>
                <div class="clear-both"></div>
            </apex:form>
            <div class="clear-both"></div>
        </div>
        <div class="k-content"> 
            <apex:form id="theForm" >
                <div id="panel-form"  style="width:100%;">
                    <div id="panel-view">
                        <h1>Add Attachments</h1>
                            <div  id="file-container">
                                <apex:inputFile value="{!fileToUpload.body}" fileName="{!fileToUpload.Name}" id="fileButton" /> 
                            </div>
                            <div style="margin:5px;padding:5px;">Internal Only &nbsp;<apex:inputCheckbox id="internalCheck" value="{!isFileInternal}" /></div>
                            <div>
                                <apex:commandLink value="Submit" action="{!CreateAttachment}" styleClass="k-button" ></apex:commandLink>
                            </div>
                    </div>
                </div>
            </apex:form>
            <div id="attachGrid" style="margin-bottom:1em;"></div>
            <div class="clear-both"></div>
        </div>
        <!-- ********************* Event Log section ******************* -->
        <div class="k-content">
            {!Case.Parent.CaseNumber}
            {!Case.Parent.Subject}
            <div id="eventLogGrid" style="margin-bottom:1em;"></div>
            <div class="clear-both"></div>
        </div>    
     </div>
     
     <div id="support-instructions" style="display:none;"> 
          {!Case.Account.SupportInstructions__c}
      </div>
    
    
            <script id="event-log-template" type="text/x-kendo-template">
                        <div class="log-info">
                            #if (IsPublished) {# Public #}else{# Internal #}# - #: kendo.toString(CreatedDate,'M/d/yyyy h:mm tt') #
                        </div>
                        <div class="log-body">
                            #: CommentBody#
                        </div>
            </script>
      
            <script type="text/javascript">
                $(document).ready(function() {
                    
                    $('#support-instructions').kendoWindow({
                        title: 'Support Instructions',
                        resizable: false,
                        width: 450,
                        modal: true
                    });
                    
                    
                    activateTabStrip();
                    
                    setupKendoUpload();
                    $('#uploadFile').click(function() {
                      uploadAttachment();
                    });
                    
                    var queueList = document.getElementById("{!$Component.openCasesForm.queueList}");
                    $(queueList).kendoComboBox();
                    var skillList = document.getElementById("{!$Component.openCasesForm.tsSkill}");
                    $(skillList).kendoComboBox();
                    
                    
                });
                
                
                var eventHandler = function (result) {
                    refreshList();
                    
                    if(result.ParentId == '{!Case.ParentId}'){
                        eventLogDataSource.read();
                    }
                 };

             //Add a push notification listener for Cases
             sforce.console.addPushNotificationListener(['Case'], eventHandler);
                
                function setupKendoUpload(){
                  var fileButton = document.getElementById("{!$Component.theForm.fileButton}");
                  $(fileButton).kendoUpload({
                        multiple: false,
                        localization: {
                            select: "Select file..."
                        }
                    });
                }
                
                var attachmentDataSource = new kendo.data.DataSource({
                    sort:{field: "LastModifiedDate", dir:"desc"},
                  transport:{
                      read: function(options){
                                ConsoleCaseRightSidebarExtension.JsonSelectCaseAttachments(
                                      '{!Case.Id}',
                                      function(result,event)
                                      {
                                          console.log(result);
                                          if (event.status) {
                                              console.log(JSON.parse(result));
                                              options.success(JSON.parse(result));
                                                $("#java-errors").hide();
                                            } else if (event.type === 'exception') {
                                                $("#java-errors").show();
                                                document.getElementById("java-errors").innerHTML = event.message;
                                            } else {
                                                $("#java-errors").show();
                                                document.getElementById("java-errors").innerHTML = event.message;
                                            }
                                      });
                            }
                      },
                    schema:{
                        model: {
                            id: "AttachmentId",
                            fields: {
                                "AttachmentId": {type: "string"},
                                "IsPublic": {type: "boolean", validation: { required: true }},
                                "FileName" : {type: "string" },
                                "Description": {type: "string"},
                                "LastModifiedDate": {type: "date", defaultValue: null},
                                "LastModifiedBy": {type: "string"},
                                "Attach": {defaultValue:{Id:"", url:"",Name:""}}
                            }
                        }
                    }
                  });
                  
              function setupAttachmentGrid()
            {
                $("#attachGrid").kendoGrid({
                  dataSource: attachmentDataSource,
                  editable: false,
                  columns: [{
                                field:"AttachmentId",
                                filterable: false,
                                hidden: true
                            },
                            {
                                field:"IsPublic",
                                title: "Visibility",
                                width: 70,
                                template: '#= (IsPublic) ? \'Public\' : \'Internal\' #'
                            },
                            {
                                field:"FileName",
                                title: "File Name",
                                template: '<a href="/servlet/servlet.FileDownload?file=#= AttachmentId #" target="_blank" title="#= FileName #" >#= FileName #</a>'
                                
                            },
                            {
                                field: "Description",
                                title: "Description",
                                hidden: true
                            },
                            {
                                field: "LastModifiedDate",
                                title: "Last Modified Date",
                                format: "{0:g}"
                            },
                            {
                                field: "LastModifiedBy",
                                title: "Last Modified By"
                            },
                            {
                                field: "Action",
                                title: "Action", 
                                editor: function(container, options){},
                                template: '#{#<a style="min-width:0;" onClick="deleteAttachment(this);" data-value="Delete" title="Delete Attachment" class="k-button"><span class="k-icon k-i-close"></span></a># } #' +
                                      '#if (IsPublic ) { #<a style="min-width:0;" onClick="changeVisibility(this);" data-value="Private" title="Make Internal" class="k-button"><span class="k-icon k-i-tick"></span></a># } #' +
                                      '#if (!IsPublic) { #<a style="min-width:0;" onClick="changeVisibility(this);" data-value="Public" title="Make Public" class="k-button"><span class="k-icon k-i-note"></span></a># } #'
                            }
                            
                  ],
                    dataBound: function () {
                        SetMessagesOnKendoGrid("#attachGrid", "No Attachments Found");
                    },
                  sortable: {
                    mode: "multiple"
                  }
                });
            }
                
                function loadData(e){
                    var tabId = $(e.item)[0].id;
                    console.log(tabId);
                    
                    if(tabId === "attachment-tab"){
                        setupAttachmentGrid();
                    } else if(tabId === "event-log-tab"){
                        setupEventLogGrid();
                    }
                }
                
                function activateTabStrip(){
                    
                        
                    var tabStrip = $("#tabstrip").kendoTabStrip({
                                        animation: false,
                                        select:loadData
                                    }).data("kendoTabStrip");
                                    
                    var tabToActivate = $("#{!activeTab}");
                    var tab = tabStrip.select(tabToActivate);
                    if("{!activeTab}" === "attachment-tab"){
                        setupAttachmentGrid();
                    } else{            
                        var priorities = '{!Case.Account.SupportMessagePriorities__c}'; 
                        
                        if(priorities.indexOf('{!Case.Priority}') != -1 && !{!Case.IsClosed} && '{!Case.RecordType.Name}' === 'Incident'){
                            $('#support-instructions').data('kendoWindow').center().open();
                        }
                    }
                    
                    if("{!Case.ParentId}" === ""){
                        tabStrip.remove("#event-log-tab");
                    }
                }
                
                var onActivate = function(e) {
                    var result = $(e.item)[0].id;
                    console.log(result);
                    
                    if(result === "attachment-tab"){
                        setupAttachmentGrid();
                    }
                };
                
                function reloadTab(){
                    $("#tabstrip").kendoTabStrip().data("kendoTabStrip").reload("open-tab");
                }
                
                function openCase(id, caseNum) {
                    //Open a new primary tab with the salesforce.com home page in it
                    sforce.console.openPrimaryTab(null, '/'+id, true, 
                        'Case: '+ caseNum);
                }
                
                
                
                
                function articleSearchText(){
                    return $("#articleSearchText").val();
                }
    
                var eventLogDataSource = new kendo.data.DataSource({
                  transport:{
                      read: function(options){
                                ConsoleCaseRightSidebarExtension.JsonEventLog(
                                      '{!Case.ParentId}',
                                      function(result,event)
                                      {
                                          if (event.status) {
                                              //console.log(JSON.parse(result));
                                              options.success(JSON.parse(result));
                                                $("#java-errors").hide();
                                            } else if (event.type === 'exception') {
                                                $("#java-errors").show();
                                                document.getElementById("java-errors").innerHTML = event.message;
                                            } else {
                                                $("#java-errors").show();
                                                document.getElementById("java-errors").innerHTML = event.message;
                                            }
                                      },
                                      {escape: false}
                               );
                            }
                      },
                    schema:{
                        model: {
                            id: "Id",
                            fields: {
                                "Id": {type: "string"},
                                "CommentBody": {type: "string"},
                                "IsPublished" : {type: "boolean" },
                                "CreatedDate": {type: "date", format:"{0:G}"}
                            }
                        }
                    }
                  });
                  
                  
                  
                 
                
                var attachmentDataSource = new kendo.data.DataSource({
                    sort:{field: "LastModifiedDate", dir:"desc"},
                  transport:{
                      read: function(options){
                                ConsoleCaseRightSidebarExtension.JsonSelectCaseAttachments(
                                      '{!Case.Id}',
                                      function(result,event)
                                      {
                                          if (event.status) {
                                              //console.log(JSON.parse(result));
                                              options.success(JSON.parse(result));
                                                $("#java-errors").hide();
                                            } else if (event.type === 'exception') {
                                                $("#java-errors").show();
                                                document.getElementById("java-errors").innerHTML = event.message;
                                            } else {
                                                $("#java-errors").show();
                                                document.getElementById("java-errors").innerHTML = event.message;
                                            }
                                      },
                                      {escape: false}
                               );
                            }
                      },
                    schema:{
                        model: {
                            id: "AttachmentId",
                            fields: {
                                "AttachmentId": {type: "string"},
                                "IsPublic": {type: "boolean", validation: { required: true }},
                                "FileName" : {type: "string" },
                                "Description": {type: "string"},
                                "LastModifiedDate": {type: "date", defaultValue: null},
                                "LastModifiedBy": {type: "string"},
                                "Attach": {defaultValue:{Id:"", url:"",Name:""}}
                            }
                        }
                    }
                  });
                
                

             
             function changeVisibility(e){
                 var r = confirm("Are you sure you want to change the visibility of this record?")
                 if(r==true){
                     // e.target is the DOM element representing the button
                      var tr = $(e).parents("tr[data-uid]"); // get the current table row (tr)
                      // get the data bound to the current table row
                      var data = attachmentDataSource.getByUid($(tr).data('uid'));
                 
                     ConsoleCaseRightSidebarExtension.UpdateVisibility(
                          data.AttachmentId, !data.IsPublic, "{!Case.Id}",
                          function(result,event)
                          {
                              
                              if (event.status) {
                                       attachmentDataSource.read();
                                        $("#java-errors").hide();
                                } else if (event.type === 'exception') {
                                    $("#java-errors").show();
                                    document.getElementById("java-errors").innerHTML = event.message;
                                } else {
                                    $("#java-errors").show();
                                    document.getElementById("java-errors").innerHTML = event.message;
                                }
                          },
                          {escape: false}
                       );
                   }
             }
             
             function deleteAttachment(e){
                 
                 var r = confirm("Are you sure you want to delete this record?")
                 if(r==true){
                 
                     // e.target is the DOM element representing the button
                      var tr = $(e).parents("tr[data-uid]"); // get the current table row (tr)
                      // get the data bound to the current table row
                      var data = attachmentDataSource.getByUid($(tr).data('uid'));
                 
                     ConsoleCaseRightSidebarExtension.DeleteAttachment(
                          data.AttachmentId,
                          function(result,event)
                          {
                              
                              if (event.status) {
                                       attachmentDataSource.read();
                                        $("#java-errors").hide();
                                } else if (event.type === 'exception') {
                                    $("#java-errors").show();
                                    document.getElementById("java-errors").innerHTML = event.message;
                                } else {
                                    $("#java-errors").show();
                                    document.getElementById("java-errors").innerHTML = event.message;
                                }
                          },
                          {escape: false}
                       );
                   }
             }
             
             
    
            function setupEventLogGrid()
            {
                $("#eventLogGrid").kendoGrid({
                  dataSource: eventLogDataSource,
                  editable: false,
                  columns: [{
                              field:"CommentBody",
                                title:"Log",
                                template:kendo.template($("#event-log-template").html())
                             }
                  ],
                    dataBound: function () {
                        SetMessagesOnKendoGrid("#articleGrid", "No Articles Found.");
                    }
                });
            }
             
             
             
            
            
            function SetMessagesOnKendoGrid(gridId, noRecordsMessage, largeRecordsMessage, largeRecordsLimit) {

                var grid = $(gridId).data('kendoGrid');
            
                var dataMessageId = $(gridId).attr('id') + '-dataMessage';
            
                if (grid.dataSource.total() === 0) {
                    var colCount = grid.columns.length;
                    grid.tbody.append('<tr class="kendo-data-row"><td colspan="' + colCount + '" style="text-align:center;margin:10px;"><div style="margin:10px;"><b>' + noRecordsMessage + '</b></div></td></tr>');
                    $('#' + dataMessageId).remove();
                }
                else if (largeRecordsLimit !== undefined && grid.dataSource.total() >= largeRecordsLimit) {
                    hideFooter(gridId);
                    if($('#' + dataMessageId).size() === 0)
                        $(gridId).parent().before('<div class="info-message clear-both" style="margin:10px;" id="' + dataMessageId + '">' + largeRecordsMessage + '</div>');
                }
                else {
                    $('#' + dataMessageId).remove();
                }
            }
    
            </script>
</apex:page>