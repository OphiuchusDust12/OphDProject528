<!--
 - Created by william.nelson on 10/19/2017.
 -->

<apex:page id="AssetSubscriptionAllocationNewWill" sideBar="false" controller="AssetSubscriptionAllocationNewController" title="Asset/Subscription Allocation" tabStyle="Project__c">

    <apex:includeScript value="{!URLFOR($Resource.inContactResource, '/inContactResource/js/jquery-3.1.1.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/js/kendo.all.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.inContactResource, '/inContactResource/js/bootstrap.min.js')}"/>


    <apex:stylesheet value="{!URLFOR($Resource.inContactResource, '/inContactResource/css/bootstrap.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.inContactResource, '/inContactResource/css/bootstrap-theme.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.common.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.default.mobile.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.default.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.silver.min.css')}"/>

    <apex:sectionHeader subtitle="{!Asset.Name}" title="Asset Allocation" rendered="{!NOT(ISNULL(Asset))}"/>

    <apex:sectionHeader subtitle="{!Subscription.Name}" title="Subscription Allocation" rendered="{!NOT(ISNULL(Subscription))}"/>

    <apex:sectionHeader subtitle="{!Project.Name}" title="Project Allocation" rendered="{!NOT(ISNULL(Project))}"/>


    <style>
        .image {
            padding-left:15px;
        }
    </style>
    <apex:form id="myform">

        <apex:pageBlock title="Project Detail" rendered="{!Not(ISNULL(Project))}">
            <apex:pageBlockButtons title="" location="bottom">
                <apex:commandButton title="Back" value="Back" action="{!cancel}" immediate="true"/>
            </apex:pageBlockButtons>
            <apex:pageBlockSection columns="2" >
                <apex:repeat value="{!$ObjectType.Project__c.FieldSets.PS_Project_Allocation}" var="f">
                    <apex:outputfield value="{!Project[f]}" />
                </apex:repeat>
            </apex:pageBlockSection>
        </apex:pageBlock>

        <apex:pageBlock title="Asset Detail" rendered="{!Not(ISNULL(asset))}">
            <apex:pageBlockButtons title="" location="bottom">
                <apex:commandButton title="Back" value="Back" action="{!cancel}" immediate="true"/>
            </apex:pageBlockButtons>
            <apex:pageBlockSection columns="2" >
                <apex:repeat value="{!$ObjectType.Asset.FieldSets.PS_Asset_Allocation}" var="f">
                    <apex:outputfield value="{!Asset[f]}" />
                </apex:repeat>
            </apex:pageBlockSection>
        </apex:pageBlock>

        <apex:pageBlock title="Subscription Detail" rendered="{!Not(ISNULL(Subscription))}">
            <apex:pageBlockButtons title="" location="bottom">
                <apex:commandButton title="Back" value="Back" action="{!cancel}" immediate="true"/>
            </apex:pageBlockButtons>
            <apex:pageBlockSection columns="2" >
                <apex:repeat value="{!$ObjectType.SubscriptionReplica__c.FieldSets.PS_Subscription_Allocation}" var="f">
                    <apex:outputfield value="{!Subscription[f]}" />
                </apex:repeat>
            </apex:pageBlockSection>
        </apex:pageBlock>

        <apex:outputPanel id="assetAllocationPanel">
            <apex:pageBlock id="assetAllocationBlock">
                <apex:pageBlockSection collapsible="false"  columns="1" showHeader="true" title="Asset Allocation"/>
                <div id="assetAllocationList"></div>
            </apex:pageBlock>
        </apex:outputPanel>
        <apex:outputPanel id="subscriptiontAllocationPanel">
            <apex:pageBlock id="subscriptiontAllocationBlock">
                <apex:pageBlockSection collapsible="false"  columns="1" showHeader="true" title="Subscription Allocation"/>
                <div id="subscriptionAllocationList"></div>
            </apex:pageBlock>
        </apex:outputPanel>
    </apex:form>
    <script>


        $(document).ready(function() {
           getSObjType();

        });

        var assetQuantity = 0,
            currentObjectType;


        function getSObjType(){
             AssetSubscriptionAllocationNewController.getObjectType(
                           '{!currentId}',
                            function(result, event){
                                    if(event.status){
                                        console.log('object type ==>' + result);
                                        if(result.length > 1){
                                            if(result == 'Asset'){
                                                currentObjectType = result;
                                              console.log('results =>' + JSON.stringify(result));
                                              assetAllocationData(null, '{!currentId}');
                                           }
                                           else if(result == 'Subscription'){
                                               console.log('results =>' + JSON.stringify(result));
                                               subscriptionAllocationData(null, '{!currentId}');
                                           }
                                        }
                                    }
                             });
         }
        function assetAllocationData(projId, assetId){
               var assetAllocationData = new kendo.data.DataSource({
                    autosync:true,
                    transport:{
                      read: function(options){
                               AssetSubscriptionAllocationNewController.getAssetAllocationData(
                                   projId,
                                   assetId,
                                  function(result,event)
                                      {
                                          if (event.status) {
                                              if(result.length > 1){
                                                   options.success(JSON.parse(result));
                                                   console.log('results =>' + JSON.stringify(result));
                                              }
                                          }
                                      },
                                      {escape: false}
                               );
                      },
                      update: function(options){
                          console.log('options =>' + JSON.stringify(options.data));
                          options.success();
                        },
                        create: function(options){
                             console.log('options =>' + JSON.stringify(options.data));
                             options.success();
                        },
                        destroy: function(options){

                             options.success();
                        },
                    },
                    schema:{
                        model: {
                            id: "AssetAllocationId",
                            fields: {
                                AssetAllocationId: { from: "AssetAllocationId"},
                                Asset: {from:"Asset", type: "string"},
                                AssetName : {from:"AssetName", type:"string"},
                                AssetAllocationName : {from:"AssetAllocationName", type:"string"},
                                ProjectNumber:{from:"ProjectNumber",type:"string"},
                                ProjectName:{from:"ProjectName",type:"string"},
                                ProjectPhase : {from:"ProjectPhase", type: "string"},
                                AllocatedQuantity:{from: "AllocatedQuantity", type:"number", nullable: true, editable:true},
                                AllocatedHours:{from: "AllocatedHours", type:"number",  nullable: true, editable:true},
                                AllocatedPercentage:{from: "AllocatedPercentage", type:"number", nullable: true, editable:true},
                                Quantity :{from:"Quantity", type:"number"}
                            }
                        }
                    }
               });

              $("#assetAllocationList").kendoGrid({
                  dataSource: assetAllocationData,
                  editable: "inline",
                  scrollable: false,
                  noRecords: true,
                  height: 350,
                  edit: addDuplicateRowAsset,
                  dataBound : gridDataboundAsset,
                  detailInit: detailProjects,
                  cancel : hideChildProjects,
                  toolbar: [
                      {
                          name: "create",
                          text: "Add New Row"

                      }
                      ],
                  columns: [{
                                field:"Id",
                                hidden: true,
                                editable:false

                            },
                            {
                                field:"AssetName",
                                title:"Asset",
                                editor:nonEditorAsset,
                                template: '#{ #<a href="/#: data.Asset #" target="_blank" name="AssetName">#= data.AssetName #</a># } #',
                            },
                            {
                                field:"AssetAllocationName",
                                title:"Allocation",
                                editor:nonEditorAsset,
                                template: '#{ #<a href="/#: data.Id #" target="_blank" >#= data.AssetAllocationName #</a># } #',
                            },
                            {
                                field:"ProjectName",
                                title:"Project",
                                editor:nonEditorAsset,
                                template: '#{ #<a href="/#: data.ProjectNumber #" target="_blank" >#= data.ProjectName #</a># } #',
                            },
                            {
                                field:"ProjectPhase",
                                title:"Project Phase",
                                editor:nonEditorAsset,
                                filterable:true
                            },
                            {
                                field:"AllocatedQuantity",
                                title:"Allocated Quantity",
                                editor:nonEditorAsset,
                                editable:true
                            },
                            {
                                field:"AllocatedPercentage",
                                title:"Allocated Percentage",
                                editor:nonEditorAsset,
                                editable:true
                            },
                            {
                                field:"AllocatedHours",
                                title:"Allocated Hours",
                                editable:true
                            },
                            {   title:"Action",
                                command: ["edit","destroy"]
                            }

                  ]
              });
       }


        function addDuplicateRowAsset(e){

            if(e.model.isNew() && !e.model.dirty ){
                var assetGrid = this;
                var dataItems = assetGrid.dataSource.view();
                var totalQuantity = 0,
                    totalPercentage = 0;

                for(var i = 0; i < dataItems.length; i++){
                    if(dataItems[i].get("AllocatedQuantity") > 0 && dataItems[i].get("AllocatedQuantity") != null){
                         totalQuantity += Number(dataItems[i].get("AllocatedQuantity"));
                    }else if(dataItems[i].get("AllocatedPercentage") > 0 && dataItems[i].get("AllocatedPercentage") != null){
                        totalPercentage += Number(dataItems[i].get("AllocatedPercentage"));
                    }
                }

                if(totalQuantity > 0){
                    var remainingQuantity = 100 -  totalQuantity;
                    var allocatedQuantityCell =  e.container.contents()[6];
                    $(allocatedQuantityCell).find("input").val(remainingQuantity)
                    e.model.AllocatedQuantity = remainingQuantity;
                }else if(totalPercentage > 0 ){
                    var remainingPercentage = 100 -  totalPercentage;
                    var allocatedQPercentageCell =  e.container.contents()[7];
                    $(allocatedQPercentageCell).find("input").val(remainingPercentage)
                    e.model.AllocatedPercentage = remainingPercentage;
                }

                if(currentObjectType == 'Asset'){
                    e.model.Asset = dataItems[1].get("Asset");
                    e.model.AssetName = dataItems[1].get("AssetName");
                    var firstCell = e.container.contents()[2];
                    $('<a href="/' +  e.model.Asset + '" target="_blank">' + e.model.AssetName +'</a>').appendTo(firstCell);
                    var projectCell = e.container.contents()[4];
                    $('<a style="color:blue;cursor:pointer;" onClick="loadDetail(this);">Select Projects </a>').appendTo(projectCell);
                }
            }
             $("#assetAllocationList").find(".k-hierarchy-cell, .k-hierarchy-col").hide();
        }

//' +   e + '); return false;
         function nonEditorAsset(container, options) {
              if(options.field == "AllocatedQuantity" && assetQuantity == 1){
                    container.text(options.model[options.field]);
              }else if(options.field == "AllocatedPercentage" && assetQuantity > 1){
                  container.text(options.model[options.field]);
              }else if(options.field != "AllocatedQuantity" && options.field != "AllocatedPercentage"){
                  container.text(options.model[options.field]);
              }

            if(options.field == "AllocatedQuantity" && assetQuantity > 1){

                $('<input style="width:95%" required  id="AllocatedQuantity" name="AllocatedQuantity"  data-bind="value:' + options.field + '"/>')
                .appendTo(container);



            }else if (options.field == "AllocatedPercentage" && assetQuantity == 1){

                 $('<input style="width:95%" required  id="AllocatedPercentage" name="AllocatedPercentage"  data-bind="value:' + options.field + '"/>')
                .appendTo(container);
            }
       }

       function gridDataboundAsset(e){
          // var grid = this;
          $("#assetAllocationList").find(".k-hierarchy-cell, .k-hierarchy-col").hide();
          var assetGrid = this;
          var dataItems = assetGrid.dataSource.view();
          if(dataItems[0].get("id") != ''){
               assetQuantity = dataItems[0].get("Quantity");
          }

          console.log('assetQuantity ==> ' + assetQuantity);

       }

       function loadDetail(obj){
           var row = $(obj).parent().parent();
           var link = $(row).find("td.k-hierarchy-cell .k-icon");
           link.click();
           $(row).next().find(".k-hierarchy-cell").hide();
       }

        function detailProjects(e) {
             $("<div/>").appendTo(e.detailCell).kendoGrid({
                        dataSource: {
                            autosync:true,
                            transport: {
                                read: function(options){
                                   var project;
                                   project =  e.data.Asset;
                                   if (project == null){
                                       project =  e.data.Subscription;
                                   }
                                   AssetSubscriptionAllocationNewController.PhaseProjectDetailsSubscription(
                                   project,
                                   function(result,event){
                                      if (event.status) {
                                          if(result.length > 1){
                                               options.success(JSON.parse(result));
                                               console.log('PhaseProjectDetails =>' + JSON.stringify(result));
                                          }
                                      }
                                    },{escape: false}
                                 );
                                },
                            },
                            schema:{
                                model: {
                                    id: "ProjectId",
                                    fields: {
                                        ProjectId: { from: "Id"},
                                        ProjectNumber: {from:"Name", type: "string"},
                                        Summary : {from:"Summary__c", type:"string"},
                                        Status : {from:"ProjectStatus__c", type:"string"}
                                    }
                                }
                            }
                        },
                        scrollable: false,
                        sortable: true,
                        columns: [
                            { field: "ProjectNumber", width: "110px" },
                            { field: "Summary", title:"Project Summary", width: "200px" },
                            { field: "Status", title:"Project Status", width: "110px" },
                            { command: { text: "Select", click : selectProject}, title: "Action", width: "180px" }
                        ]
                    });
                }

              function selectProject(e){
                  var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
                  var detailGrid = this.wrapper;
                  var parentRow = detailGrid.closest("tr.k-detail-row").prev("tr");
                  var grid = $("#assetAllocationList").data("kendoGrid");
                  var rowData = grid.dataItem(parentRow);
                  if(rowData){
                      rowData.ProjectNumber = dataItem.ProjectId;
                      rowData.ProjectName = dataItem.ProjectNumber;
                      rowData.ProjectPhase = dataItem.ProjectNumber + ' - ' + dataItem.Summary;
                      //grid.dataSource.sync();
                      var projectCell = $(parentRow).children().eq(4);
                      var htmlContentProject = $('<a style="color:blue;cursor:pointer;" onClick="loadDetail(this);">' + dataItem.ProjectNumber +'</a>');
                      $(projectCell).html(htmlContentProject);
                      var projectPhaseCell = $(parentRow).children().eq(5);
                      var htmlProjectPhase = $('<span> ' + rowData.ProjectPhase +'</span>');
                      $(projectPhaseCell).html(htmlProjectPhase);
                  }
              }

              function hideChildProjects(e){
                  setTimeout(function(){
                   $("#assetAllocationList").find(".k-hierarchy-cell, .k-hierarchy-col").hide();
                });
              }

       function subscriptionAllocationData(projId, subscriptionId){

           console.log('subscriptionId =>' + subscriptionId);
               var subscriptionAllocationData =new kendo.data.DataSource({
                    autosync:true,
                    transport:{
                      read: function(options){
                               AssetSubscriptionAllocationNewController.getSubscriptionAllocationData(projId, subscriptionId,
                                  function(result,event)
                                      {
                                          if (event.status) {
                                              if(result.length > 1){
                                                   options.success(JSON.parse(result));
                                              console.log('results =>' + JSON.stringify(result));
                                              }
                                          } else if (event.type === 'exception') {

                                          } else {

                                          }
                                      },
                                      {escape: false}
                               );
                      },
                      update: function(options){
                          options.success();
                        },
                        create: function(options){
                             options.success();
                        },
                        destroy: function(options){
                             options.success();
                        },
                    schema:{
                        model: {
                            id: "Id",
                            fields: {
                                "Subscription": {from:"Subscription", type: "string", editable:false},
                                "SubscriptionAllocationId": { from: "SubscriptionAllocationId", type: "string",editable:false },
                                "SubscriptionName" : {from:"SubscriptionName", type:"string",editable:false },
                                "SubscriptionAllocationName" : {from:"SubscriptionAllocationName", type:"string",editable:false},
                                "Product": { from: "Product", type: "string",editable:false },
                                "ProductName": { from: "ProductName", type: "string",editable:false },
                                "ProjectNumber":{from:"ProjectNumber",type:"string",editable:false},
                                "ProjectName":{from:"ProjectName",type:"string", editable:false},
                                "ProjectPhase" : {from:"ProjectPhase", type: "string", editable:false},
                                "AllocatedQuantity":{from: "AllocatedQuantity", type:"number", editable: true, nullable: true},
                                "AllocatedHours":{from: "AllocatedHours", type:"number", editable: true, nullable: true},
                                "AllocatedPercentage":{from: "AllocatedPercentage", type:"number", editable: true, nullable: true}
                            }
                        }
                       }
                  }
               });



            $("#subscriptionAllocationList").kendoGrid({
                  dataSource: subscriptionAllocationData,
                  editable: "inline",
                  scrollable: true,
                  noRecords: true,
                  height: 350,
                  detailInit: detailProjects,
                  cancel : hideChildProjects,
                  toolbar: [
                      {
                          name: "create",
                          text: "Add New Row"

                      },
                      {
                          name: "save",
                          text: "Save Changes"

                      },
                      {
                          name: "cancel",
                          text: "Cancel Changes"

                      },
                      {
                          name: "delete",
                          text: "Delete"

                      }

                      ],
                  columns: [{
                                field:"Id",
                                hidden: true,
                                editable:false

                            },
                            {
                                field:"SubscriptionName",
                                title:"Subscription",
                                editor:nonEditorSubscription,
                                template: '#{ #<a href="/#: data.Subscription #" target="_blank" >#= data.SubscriptionName #</a># } #',
                            },
                            {
                                field:"SubscriptionAllocationName",
                                title:"Subscription Allocation",
                                editor:nonEditorSubscription,
                                template: '#{ #<a href="/#: data.SubscriptionAllocationId #" target="_blank" >#= data.SubscriptionAllocationName #</a># } #',
                            },
                            {
                                field:"ProjectName",
                                title:"Project",
                                editor:nonEditorSubscription,
                                template: '#{ #<a href="/#: data.ProjectNumber #" target="_blank" >#= data.ProjectName #</a># } #',
                            },
                            {
                                field:"ProductName",
                                title:"Product",
                                editor:nonEditorSubscription,
                                template: '#{ #<a href="/#: data.Product #" target="_blank" >#= data.ProductName #</a># } #',
                            },
                            {
                                field:"ProjectPhase",
                                title:"Project Phase",
                                editor:nonEditorSubscription,
                                filterable:true
                            },
                            {
                                field:"AllocatedQuantity",
                                title:"Allocated Quantity",
                                editable:true
                            },
                            {
                                field:"AllocatedPercentage",
                                title:"Allocated Percentage",
                                editable:true
                            },
                            {
                                field:"AllocatedHours",
                                title:"Allocated Hours",
                                editable:true
                            },
                            {   title:"Action",
                                command: ["edit","destroy"]
                            }
                  ]
              });
       }

          function nonEditorSubscription(container, options) {
              if(options.field == "AllocatedQuantity" && assetQuantity == 1){
                    container.text(options.model[options.field]);
              }else if(options.field == "AllocatedPercentage" && assetQuantity > 1){
                  container.text(options.model[options.field]);
              }else if(options.field != "AllocatedQuantity" && options.field != "AllocatedPercentage"){
                  container.text(options.model[options.field]);
              }

            if(options.field == "AllocatedQuantity" && assetQuantity > 1){

                $('<input style="width:95%" required  id="AllocatedQuantity" name="AllocatedQuantity"  data-bind="value:' + options.field + '"/>')
                .appendTo(container);



            }else if (options.field == "AllocatedPercentage" && assetQuantity == 1){

                 $('<input style="width:95%" required  id="AllocatedPercentage" name="AllocatedPercentage"  data-bind="value:' + options.field + '"/>')
                .appendTo(container);
            }
       }

    </script>
</apex:page>
