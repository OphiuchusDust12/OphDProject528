<!--
 - Created by ravish.chawla on 10/12/2017.
 -->

<apex:page id="AssetSubscriptionAllocationNew" sideBar="false" controller="AssetSubscriptionAllocationNewController" title="Asset/Subscription Allocation" tabStyle="Project__c">

    <apex:includeScript value="{!URLFOR($Resource.inContactResource, '/inContactResource/js/jquery-3.1.1.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/js/kendo.all.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.inContactResource, '/inContactResource/js/bootstrap.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.AllocationStaticResources, '/AllocationStaticResources/js/AssetAllocation.js')}"/>

    <apex:stylesheet value="{!URLFOR($Resource.inContactResource, '/inContactResource/css/bootstrap.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.inContactResource, '/inContactResource/css/bootstrap-theme.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.common.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.default.mobile.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.default.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.silver.min.css')}"/>

    <apex:sectionHeader subtitle="{!Asset.Name}" title="Asset Allocation" rendered="{!NOT(ISNULL(Asset))}"/>

    <apex:sectionHeader subtitle="{!Subscription.Name}" title="Subscription Allocation" rendered="{!NOT(ISNULL(Subscription))}"/>

    <apex:sectionHeader subtitle="{!Project.Name}" title="Project Allocation" rendered="{!NOT(ISNULL(Project))}"/>


    <style>
        .image {
            padding-left:15px;
        }
       #detailTable .k-grid-header .k-header {
            background-color: #3f51b5 !important;
            border-color: #3343a4 !important;
            color : white !important;

        }
       #detailTable .k-grid-header .k-header>.k-link{
              color : white !important;
       }

        .spinnerClass {
            background:url('../../img/loading32.gif') no-repeat;
            height:32px;
            margin:20px;
            padding-left:40px;
            padding-top:9px;
            font-size: 0.75em;
    	}

    	.k-grid-Select{

     }

    </style>
    <apex:form id="myform">

        <apex:pageBlock title="Project Detail" rendered="{!Not(ISNULL(Project))}">
            <apex:pageBlockButtons title="" location="bottom">
                <apex:commandButton title="Back" value="Back" action="{!cancel}" immediate="true"/>
            </apex:pageBlockButtons>
            <apex:pageBlockSection columns="2" >
                <apex:repeat value="{!$ObjectType.Project__c.FieldSets.PS_Project_Allocation}" var="f">
                    <apex:outputfield value="{!Project[f]}" />
                </apex:repeat>
            </apex:pageBlockSection>
        </apex:pageBlock>

        <apex:pageBlock title="Asset Detail" rendered="{!Not(ISNULL(asset))}">
            <apex:pageBlockButtons title="" location="bottom">
                <apex:commandButton title="Back" value="Back" action="{!cancel}" immediate="true"/>
            </apex:pageBlockButtons>
            <apex:pageBlockSection columns="2" >
                <apex:repeat value="{!$ObjectType.Asset.FieldSets.PS_Asset_Allocation}" var="f">
                    <apex:outputfield value="{!Asset[f]}" />
                </apex:repeat>
            </apex:pageBlockSection>
        </apex:pageBlock>

        <apex:pageBlock title="Subscription Detail" rendered="{!Not(ISNULL(Subscription))}">
            <apex:pageBlockButtons title="" location="bottom">
                <apex:commandButton title="Back" value="Back" action="{!cancel}" immediate="true"/>
            </apex:pageBlockButtons>
            <apex:pageBlockSection columns="2" >
                <apex:repeat value="{!$ObjectType.SubscriptionReplica__c.FieldSets.PS_Subscription_Allocation}" var="f">
                    <apex:outputfield value="{!Subscription[f]}" />
                </apex:repeat>
            </apex:pageBlockSection>
        </apex:pageBlock>

        <div id="assetAllocationPanel">
            <apex:pageBlock id="assetAllocationBlock">
                <apex:pageBlockSection collapsible="false"  columns="1" showHeader="true" title="Asset Allocation"/>
                <div id="assetAllocationList"></div>
            </apex:pageBlock>
        </div>
        <div id="subscriptiontAllocationPanel">
            <apex:pageBlock id="subscriptiontAllocationBlock">
                <apex:pageBlockSection collapsible="false"  columns="1" showHeader="true" title="Subscription Allocation"/>
                <div id="subscriptionAllocationList"></div>
                <div id="window"></div>
            </apex:pageBlock>
        </div>
        <!-- Confirmation Modal -->
        <div class="modal fade" id="warning" tabindex="-1" role="dialog" aria-labelledby="warning" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel" style="font-weight:bold">Alert</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" style="font-size:14px;">
                        <div id="java-errors" class=" alert alert-danger message-alert" style="margin-left:15px;width:90%; display:none;"></div>
                        <div id="success" class=" alert alert-success message-alert" style="margin-left:15px;width:90%; display:none;"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn button-cancel" data-dismiss="modal" style="color:black !important;">OK</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- loading Modal -->
        <div class="modal fade" id="loading" tabindex="-1" role="dialog" aria-labelledby="info" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content" style="width:40%; top: 182px;">
                    <div class="modal-body" style="font-size:14px;">
                        <div class="spinnerClass">Adding Allocations</div>
                    </div>
                </div>
            </div>
        </div>

    </apex:form>
    <script type="text/x-kendo-template" id="windowTemplate">
        <p>Delete this Allocation for Asset <strong>#= AssetName #</strong> ? </p>
        <p>Allocated Quantity = <strong>#= AllocatedQuantity == null ? 0 : AllocatedQuantity #</strong></p>
        <p>Allocated Percentage = <strong>#= AllocatedPercentage == null ? 0 : AllocatedPercentage #</strong></p>
        <p>Allocated Hours = <strong>#= AllocatedHours #</strong> </p>
        <button class="k-button" id="yesButton">Yes</button>
        <button class="k-button" id="noButton"> No</button>
    </script>

    <script>


        $(document).ready(function() {
           getSObjType();

        });

        var  currentObjectType,
             Asset = new Object(),
             Project = new Object(),
             Subscription = new Object();

        var windowTemplate = kendo.template($("#windowTemplate").html());

        function getSObjType(){
             AssetSubscriptionAllocationNewController.getObjectType(
               '{!currentId}',
                function(result, event){
                    if(event.status){
                        console.log('object type ==>' + result);
                        if(result.length > 1){
                            if(result == 'Asset'){
                                currentObjectType = result;
                              console.log('results =>' + JSON.stringify(result));
                              $("#subscriptiontAllocationPanel").hide();
                              Asset.Id = '{!Asset.Id}';
                              Asset.Name = '{!Asset.Name}';
                              Asset.Quantity = '{!Asset.Quantity}';
                              Asset.Budgeted_Hours__c = '{!Asset.Budgeted_Hours__c}';
                              assetAllocationData(null, '{!currentId}');

                           }
                           else if(result == 'Subscription'){
                               currentObjectType = result;
                               console.log('results =>' + JSON.stringify(result));
                               $("#assetAllocationPanel").hide();
                              Subscription.Id = '{!Subscription.Id}';
                              Subscription.Name = '{!Subscription.Name}';
                              Subscription.Quantity = '{!Subscription.Quantity__c}';
                              Subscription.Budgeted_Hours__c = '{!Subscription.Budgeted_Hours__c}';
                              subscriptionAllocationData(null, '{!currentId}');
                           }else  if(result == 'Project'){
                              currentObjectType = result;
                              console.log('results =>' + JSON.stringify(result));
                              Project.Id = '{!Project.Id}';
                              Project.Name = '{!Project.Name}';
                              Project.Project_Phase_Allocation__c = '{!Project.Project_Phase_Allocation__c}';
                              subscriptionAllocationData('{!currentId}', null);
                              assetAllocationData('{!currentId}', null);
                           }
                    }
                }
             });
        }




<!--subscriptions begin here -->

    function loadSubscriptionChildGrid(e){
        if(currentObjectType === 'Subscription'){
           detailSubscriptionProjects(e);
        } else if(currentObjectType === 'Project'){
            detailSubscription(e);
        }
    }


       function gridDataboundSubscription(e){
          // var grid = this;
          $("#subscriptionAllocationList").find(".k-hierarchy-cell, .k-hierarchy-col").hide();
      }


    function selectSubscription(e){
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var detailGrid = this.wrapper;
        var parentRow = detailGrid.closest("tr.k-detail-row").prev("tr");
        var grid = $("#subscriptionAllocationList").data("kendoGrid");
        var rowData = grid.dataItem(parentRow);
        if(rowData){
        rowData.Asset = dataItem.SubscriptionId;
        rowData.AssetName = dataItem.SubscriptionName;
        rowData.AllocatedPercentage = null;
        rowData.AllocatedQuantity = null;
        rowData.AllocatedHours = 0;
        var subscriptionCell = $(parentRow).children().eq(2);
        var htmlContentProject = $('<a style="color:blue;cursor:pointer;" onClick="loadSubscriptionDetail(this);">' + dataItem.SubscriptionName +'</a>');
        $(subscriptionCell).html(htmlContentProject);
        calculateRemainingSubscriptionAllocation(rowData, parentRow);
        }
        grid.collapseRow(parentRow);
    }

function calculateRemainingSubscriptionAllocation(rowData, row){
            var subscriptionGrid = $("#subscriptionAllocationList").data("kendoGrid");;
            var dataItems = subscriptionGrid.dataItems();
            var totalQuantity = 0,
            totalPercentage = 0;

            for(var i = 0; i < dataItems.length; i++){
                if(dataItems[i].get("Subscription") ==  rowData.Subscription){
                rowData.Quantity = dataItems[i].get("Quantity");
                rowData.BudgtedHours = dataItems[i].get("BudgtedHours");
                }
                if(rowData.Quantity > 1 && dataItems[i].get("AllocatedQuantity") != null && dataItems[i].get("Subscription") ==  rowData.Subscription){
                 totalQuantity += Number(dataItems[i].get("AllocatedQuantity"));

                }else if(rowData.Quantity == 1 && dataItems[i].get("AllocatedPercentage") != null && dataItems[i].get("Subscription") ==  rowData.Subscription){
                totalPercentage += Number(dataItems[i].get("AllocatedPercentage"));
                }
            }
            var allocatedQuantityCell =  $(row).children().eq(7);
            var allocatedQPercentageCell =  $(row).children().eq(8);
            var allocatedHoursCell =  $(row).children().eq(9);
            var hours;

            if(rowData.Quantity > 1 ){
                var remainingQuantity = rowData.Quantity -  totalQuantity;
                $(allocatedQPercentageCell).find("span.k-numerictextbox").hide();
                rowData.AllocatedQuantity = remainingQuantity;
                $(allocatedQuantityCell).find("span.k-numerictextbox").show();
                $(allocatedQuantityCell).find("input").val(remainingQuantity);
                hours = rowData.BudgtedHours * (remainingQuantity / rowData.Quantity);
                $(allocatedHoursCell).find("input").prop('disabled', false).removeClass("k-state-disabled");
                $(allocatedHoursCell).find("span.k-select").show();

            }else if(rowData.Quantity == 1 ){
                var remainingPercentage = 100 -  totalPercentage;
                rowData.AllocatedPercentage = remainingPercentage;
                $(allocatedQuantityCell).find("span.k-numerictextbox").hide();
                $(allocatedQPercentageCell).find("span.k-numerictextbox").show();
                $(allocatedQPercentageCell).find("input").val(remainingPercentage);
                var hours = rowData.BudgtedHours * (remainingPercentage / 100);
                $(allocatedHoursCell).find("input").prop('disabled', true).addClass("k-state-disabled");
                $(allocatedHoursCell).find("span.k-select").hide();

            }
            rowData.AllocatedHours = hours.toFixed(2);
            $(allocatedHoursCell).find("input").val(rowData.AllocatedHours)
        }


 function selectSubscriptionProject(e){
    var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

    var detailGrid = this.wrapper;
    var parentRow = detailGrid.closest("tr.k-detail-row").prev("tr");
    var grid = $("#subscriptionAllocationList").data("kendoGrid");
    var rowData = grid.dataItem(parentRow);
    if(rowData){
      rowData.ProjectNumber = dataItem.ProjectId;
      rowData.ProjectName = dataItem.ProjectNumber;
      rowData.ProjectPhase = dataItem.ProjectNumber + ' - ' + dataItem.Summary;
      //grid.dataSource.sync();

      var projectCell = $(parentRow).children().eq(4);
      var htmlContentProject = $('<a style="color:blue;cursor:pointer;" onClick="loadDetail(this);">' + dataItem.ProjectNumber +'</a>');
      $(projectCell).html(htmlContentProject);
      var projectPhaseCell = $(parentRow).children().eq(6);
      var htmlProjectPhase = $('<span> ' + rowData.ProjectPhase +'</span>');
      $(projectPhaseCell).html(htmlProjectPhase);
    }
    grid.collapseRow(parentRow);

  }

    function detailSubscriptionProjects(e) {
        $("<div id='detailSubscriptionTable'/>").appendTo(e.detailCell).kendoGrid({
        dataSource: {
            autosync:true,
            transport: {
                read: function(options){
                     AssetSubscriptionAllocationNewController.PhaseProjectDetailsSubscription(
                        e.data.Subscription,
                        function(result,event){
                          if (event.status) {
                              if(result.length > 1){
                                   options.success(JSON.parse(result));
                                   console.log('PhaseProjectDetails =>' + JSON.stringify(result));
                              }
                          }
                        },{escape: false}
                     );
                },
            },
            schema:{
                model: {
                    id: "ProjectId",
                    fields: {
                        ProjectId: { from: "Id"},
                        ProjectNumber: {from:"Name", type: "string"},
                        Summary : {from:"Summary__c", type:"string"},
                        Status : {from:"ProjectStatus__c", type:"string"}
                    }
                }
            }
        },
        scrollable: false,
        sortable: true,
        columns: [
            { command: { text: "Select", click : selectSubscriptionProject}, title: "Action", width: "60px" },
            { field: "ProjectNumber", width: "110px" },
            { field: "Summary", title:"Project Summary", width: "200px" },
            { field: "Status", title:"Project Status", width: "110px" }
        ]
    });
    }

       function detailSubscription(e) {
            $("<div id='detailSubscriptionTable'/>").appendTo(e.detailCell).kendoGrid({
            dataSource: {
                autosync:true,
                transport: {
                    read: function(options){
                         AssetSubscriptionAllocationNewController.AssetSubscriptionDetailsFromProjectPhase(
                            e.data.ProjectNumber,
                            'Subscription',
                            function(result,event){
                              if (event.status) {
                                  if(result.length > 1){
                                       options.success(JSON.parse(result));
                                       console.log('Subscription Details =>' + JSON.stringify(result));
                                  }
                              }
                            },{escape: false}
                         );
                    },
                },
                schema:{
                    model: {
                        id: "SubscriptionId",
                        fields: {
                            SubscriptionId: { from: "Id"},
                            SubscriptionName: {from:"Name", type: "string"},
                            Product: {from:"Product__c", type: "string"},
                            RemainingPercentage : {from:"Remaning_Percentage__c", type:"string"},
                            RemainingQuantity : {from:"RemainingQuantity__c", type:"string"},
                            RemainingHours : {from:"Remaining_Hours__c", type:"string"}
                        }
                    }
                }
            },
            scrollable: false,
            sortable: true,
            columns: [
                 {command: { text: "Select", click : selectSubscription}, title: "Action", width: "60px" },
                { field: "SubscriptionName", title:"Subscription", width: "110px" },
                { field: "Product__c", title:"Product", width: "110px" },
                { field: "RemainingPercentage", title:"Remaining Percentage", width: "200px" },
                { field: "RemainingQuantity", title:"Remaining Quantity", width: "110px" },
                { field: "RemainingHours", title:"Remaining Hours", width: "110px" }
            ]
            });
        }

function calculateSubscriptionBudgetedHours(e){
    if (e.action === "itemchange" && (e.field == "AllocatedPercentage" || e.field == "AllocatedQuantity")){
            var model = e.items[0],
                budgtedHours = model.BudgtedHours,
                currentValue;
                allocatedHoursInput = $("#subscriptionAllocationList").find("tr[data-uid='" + model.uid + "'] td:eq(9)");
          if(model.AllocatedPercentage > 0 ){
              currentValue = (budgtedHours * (model.AllocatedPercentage / 100)).toFixed(2);
              $(allocatedHoursInput).find("input").val(currentValue).prop('disabled', true).addClass("k-state-disabled");
               $(allocatedHoursInput).find("span.k-select").hide();
          }else if(model.AllocatedQuantity > 0 ){
              currentValue = (budgtedHours * (model.AllocatedQuantity / model.Quantity)).toFixed(2);
              $(allocatedHoursInput).find("input").val(currentValue).prop('disabled', false).removeClass("k-state-disabled");
              $(allocatedHoursInput).find("span.k-select").show();
          }
          model.AllocatedHours = currentValue;
    }
}



 function loadSubscriptionDetail(obj){
       var row = $(obj).parent().parent();
       var link = $(row).find("td.k-hierarchy-cell .k-icon");

       link.click();
       $(row).find("tr.k-detail-row").show();
       $(row).next().find(".k-hierarchy-cell").hide();
   }

function subscriptionAllocationData(projId, subscriptionId){

   console.log('subscriptionId =>' + subscriptionId);
       var subscriptionAllocationData =new kendo.data.DataSource({
            autosync:true,
            transport:{
              read: function(options){
                       AssetSubscriptionAllocationNewController.getSubscriptionAllocationData(projId, subscriptionId,
                          function(result,event)
                              {
                                  if (event.status) {
                                      if(result != null && result.length > 1){
                                           options.success(JSON.parse(result));
                                      console.log('results =>' + JSON.stringify(result));
                                      }else{
                                           options.success('');
                                      }
                                  } else if (event.type === 'exception') {

                                  } else {

                                  }
                              },
                              {escape: false}
                       );
              },
              update: function(options){
                  options.success();
                },
                create: function(options){
                     options.success();
                },
                destroy: function(options){
                     options.success();
                }
            },
            schema:{
                model: {
                    id: "SubscriptionAllocationId",
                    fields: {
                        "Subscription": {from:"Subscription", type: "string", editable:false},
                        "SubscriptionAllocationId": { from: "SubscriptionAllocationId", type: "string",editable:false },
                        "SubscriptionName" : {from:"SubscriptionName", type:"string",editable:false },
                        "SubscriptionAllocationName" : {from:"SubscriptionAllocationName", type:"string",editable:false},
                        "Product": { from: "Product", type: "string",editable:false },
                        "ProductName": { from: "ProductName", type: "string",editable:false },
                        "ProjectNumber":{from:"ProjectNumber",type:"string",editable:false},
                        "ProjectName":{from:"ProjectName",type:"string", editable:false},
                        "ProjectPhase" : {from:"ProjectPhase", type: "string", editable:false},
                        "AllocatedQuantity":{from: "AllocatedQuantity", type:"number", editable: true, nullable: true},
                        "BudgtedHours":{from: "BudgtedHours", type:"number"},
                        "Quantity":{from: "Quantity", type:"number"},
                        "AllocatedHours":{from: "AllocatedHours", type:"number", editable: true, nullable: true},
                        "AllocatedPercentage":{from: "AllocatedPercentage", type:"number", editable: true, nullable: true}
                    }
                }
            },
            change : calculateSubscriptionBudgetedHours
       });



    $("#subscriptionAllocationList").kendoGrid({
          dataSource: subscriptionAllocationData,
          editable: "inline",
          scrollable: true,
          noRecords: true,
          edit:addDuplicateRowSubscription,
          height: 350,
          detailInit: loadSubscriptionChildGrid,
          dataBound: gridDataboundSubscription,
          cancel : hideChildProjects,
          toolbar: [
              {
                  name: "create",
                  text: "Add New Subscription Allocation"
              }
              ],
          columns: [{
                        field:"Id",
                        hidden: true,
                        editable:false

                    },
                    {
                        field:"SubscriptionName",
                        title:"Subscription",
                        editor:nonEditorSubscription,
                        template: '#{ #<a href="/#: data.Subscription #" target="_blank" >#= data.SubscriptionName #</a># } #',
                    },
                    {
                        field:"SubscriptionAllocationName",
                        title:"Subscription Allocation",
                        editor:nonEditorSubscription,
                        template: '#{ #<a href="/#: data.SubscriptionAllocationId #" target="_blank" >#= data.SubscriptionAllocationName #</a># } #',
                    },
                    {
                        field:"ProjectName",
                        title:"Project",
                        editor:nonEditorSubscription,
                        template: '#{ #<a href="/#: data.ProjectNumber #" target="_blank" >#= data.ProjectName #</a># } #',
                    },
                    {
                        field:"ProductName",
                        title:"Product",
                        editor:nonEditorSubscription,
                        template: '#{ #<a href="/#: data.Product #" target="_blank" >#= data.ProductName #</a># } #',
                    },
                    {
                        field:"ProjectPhase",
                        title:"Project Phase",
                        editor:nonEditorSubscription,
                        filterable:true
                    },
                    {
                        field:"AllocatedQuantity",
                        title:"Allocated Quantity",
                        editable:true
                    },
                    {
                        field:"AllocatedPercentage",
                        title:"Allocated Percentage",
                        editable:true
                    },
                    {
                        field:"AllocatedHours",
                        title:"Allocated Hours",
                        editable:true
                    },
                    {   title:"Action",
                        command: ["edit","destroy"]
                    }
                ]
            });
       }

        function nonEditorSubscription(container, options) {
        container.text(options.model[options.field]);
        }



         function addDuplicateRowSubscription(e){
            var subscriptionGrid = $("#subscriptionAllocationList").data("kendoGrid");;
            var dataItems = subscriptionGrid.dataItems();
            if(e.model.isNew() && !e.model.dirty ){
                if(currentObjectType == 'Subscription'){
                    e.model.Subscription = Subscription.Id;
                    e.model.SubscriptionName = Subscription.Name;
                    var firstCell = e.container.contents()[2];
                    $('<a href="/' +  e.model.Subscription + '" target="_blank">' + e.model.SubscriptionName +'</a>').appendTo(firstCell);
                    var projectCell = e.container.contents()[4];
                    $('<a style="color:blue;cursor:pointer;" onClick="loadDetail(this);">Select Projects </a>').appendTo(projectCell);
                      e.model.Quantity = Subscription.Quantity__c;
                    e.model.BudgtedHours = Subscription.Budgeted_Hours__c;
                    calculateRemainingSubscriptionAllocation(e.model, e.container);
                }else if(currentObjectType == 'Project'){
                    e.model.ProjectNumber = '{!Project.Id}';
                    e.model.ProjectName = '{!Project.Name}';
                    e.model.ProjectPhase = '{!Project.Project_Phase_Allocation__c}';
                    var projectCell = e.container.contents()[4];
                    $('<a href="/' +  e.model.ProjectNumber + '" target="_blank">' + e.model.ProjectName +'</a>').appendTo(projectCell);
                    var phaseCell = e.container.contents()[6];
                    $('<span>' +  e.model.ProjectPhase + '</span>').appendTo(phaseCell);

                    var firstCell = e.container.contents()[2];
                    $('<a style="color:blue;cursor:pointer;" onClick="loadDetail(this);">Select Assets </a>').appendTo(firstCell);
                }
                 e.model.ProductName = dataItems[1].get("ProductName");
                 e.model.Product = dataItems[1].get("Product");
                 var ProductCell = e.container.contents()[5];
                 $('<a href="/' +  e.model.Product + '" target="_blank">' + e.model.ProductName +'</a>').appendTo(ProductCell);

                 var buttonCell = e.container.contents()[10];
                 $(buttonCell).find("a.k-primary").html('<span class="k-icon k-i-update"></span> Add');
            }else{
                enableSubscriptionAllocation(e.model, e.container);
            }
             $("#subscriptionAllocationList").find(".k-hierarchy-cell, .k-hierarchy-col").hide();
        }


        function enableSubscriptionAllocation(rowData, row){
            var allocatedHoursCell =  $(row).children().eq(9);
            if(rowData.Quantity > 1){
                var allocatedQPercentageCell =  $(row).children().eq(8);
                $(allocatedQPercentageCell).find("span.k-numerictextbox").hide();
                $(allocatedHoursCell).find("input").prop('disabled', false).removeClass("k-state-disabled");
                $(allocatedHoursCell).find("span.k-select").show();
            }else if(rowData.Quantity == 1){
                var allocatedQuantityCell =  $(row).children().eq(7);
                $(allocatedQuantityCell).find("span.k-numerictextbox").hide();
                 $(allocatedHoursCell).find("input").prop('disabled', true).addClass("k-state-disabled");
                 $(allocatedHoursCell).find("span.k-select").hide();
            }
        }

    </script>

</apex:page>
