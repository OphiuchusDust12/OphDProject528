<!--
 - Created by arnab.karsarkar on 5/4/2017.
 -->
<apex:page id="XMPersonManagement" standardController="Contact" tabStyle="Contact" sidebar="false" title="Notification Profile - {!currentContact.Name}" extensions="XMPersonManagementController">
    <apex:includeScript value="{!URLFOR($Resource.inContactResource, '/inContactResource/js/jquery-3.1.1.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/js/kendo.all.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.inContactResource, '/inContactResource/js/bootstrap.min.js')}"/>


    <apex:stylesheet value="{!URLFOR($Resource.inContactResource, '/inContactResource/css/bootstrap.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.inContactResource, '/inContactResource/css/bootstrap-theme.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.common.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.rtl.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.default.min.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.KendoUIGanttChart, '/kendo-UI/styles/kendo.silver.min.css')}"/>

    <style>
         .page-header{
                padding-bottom: 4px !important;
                margin: 0px 0 1px !important;
                border-bottom : none;
            }
            .page-header h1{
                font-size: 20px;
                text-decoration: none;
                color: #767474;
                font-family: Segoe UI;
                font-weight: 300;
               }

             .message-alert{
                padding-top: 6px;
                padding-right: 5px;
             }

         .weekDays-selector input {
              display: none!important;
            }

            .weekDays-selector input[type=checkbox] + label {
              display: inline-block;
              border-radius: 6px;
              background: #dddddd;
              height: 40px;
              width: 43px;
              margin-right: 3px;
              line-height: 40px;
              text-align: center;
              cursor: pointer;
            }

            .weekDays-selectorNew input[type=checkbox]:checked + label {
              background: #5270c7;
              color: #ffffff;
            }

            .weekDays-selector input[type=checkbox]:checked + label {
              background: #5270c7;
              color: #ffffff;
            }


           .col-10 .k-timepicker{
                width:30% !important;
            }

            .has-error {
            border-color: #a94442 !important;
            -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
            box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        }

        .button-timeframe{
            padding: 6px 12px !important;
            margin-bottom: 0 !important;
            font-weight: 400;
            color: #fff !important;
            background: none !important;
            background-color: #0275d8 !important;
            border-color: #2e6da4 !important;
            font-size: 12px !important;
            font-weight:200 !importnat;
        }

        .button-timeframe-cancel{
            padding-left: 1rem !important;
            padding-right: 1rem !important;
            text-align: center;
            vertical-align: middle;
            border: 1px solid rgb(216, 221, 230) !important;
            background-color: rgb(255, 255, 255) !important;
            color: #0275d8 !important;
            display: inline-block;
            height:33px;
            font-weight:200 !importnat;
            font-size : 12px !important;
    }

    .k-multiselect-wrap li {
        color: #fff !important;
        border-color: #357ebd !important;
        background-color: #428bca !important;
    }
    .form-control {
       padding-right: 30px;
       display: inline;
       width:50%;
    }
    .form-control + .glyphicon {
        position: absolute;
        right: 50%;
        padding: 8px 27px;
    }

    .k-grid-header th.k-header {
        vertical-align: bottom;
        font-weight: bold;
    }
    .row-unselect {
        color: #fff;
        background-color: #f5e6b4;
        border-color: #f5e6b4;
    }
    .row-unselect:hover {
        color: #fff;
        background-color: #f5e6b4 !important;
        border-color: #f5e6b4 !important;
    }

    .spinnerClass {
            background:url('../../img/loading32.gif') no-repeat;
            height:32px;
            margin:20px;
            padding-left:40px;
            padding-top:9px;
            font-size: 0.75em;
    	}
    .timepicker{
    	width:30%;
    }
   .k-autocomplete.k-state-border-up, .k-calendar-container.k-state-border-up,
    .k-dropdown-wrap.k-state-border-up, .k-filter-menu, .k-list-container.k-state-border-up,
     .k-multiselect.k-state-border-up, .k-numeric-wrap.k-state-border-up, .k-picker-wrap.k-state-border-up, .k-window-content{
        width :164px !important;
    }

    input[type="checkbox"]:disabled + label{
        color : lightgray;
    }

    .page-header h1 {
        font-size: 33px;
    }

    .hiddenText{
        display:none;
    }
    .accordion-toggle:after {
                font-family: 'Glyphicons Halflings';
                content: "\e114";
                float: left;
                padding-right : 6px;
                color: grey;
    }

    .accordion-toggle.collapsed:after {
         content: "\e080";
    }

    </style>

    <apex:form >

        <div class="container-fluid" style="font-size: 14px;">
            <apex:commandLink action="{!goBack}" value="<< Return to Contact Record" style="font-size:12px;"/>
            <br/>
            <div class="page-header">
                <h1>Notification Profile</h1>
                <p style="font-size:15px;">{!currentContact.Name}</p>
            </div>
            <apex:pageMessages id="errorMessages"/>

            <div class="panel panel-default" style="{!IF( isValidContact, 'display: inline;', 'display: none;')}">
                <apex:pageBlock id="contactDetail" >
                    <apex:pageBlockSection title="Contact Detail" collapsible="false" columns="2">
                        <apex:outputField value="{!currentContact.FirstName}"/>
                        <apex:outputField value="{!currentContact.AccountId}"/>
                        <apex:outputField value="{!currentContact.LastName}"/>
                        <apex:outputField value="{!currentContact.Account.CadebillAccountNoText__c}"/>
                        <apex:outputField value="{!currentContact.Email}" label="Salesforce Contact Email" id="contactEmail"/>
                    </apex:pageBlockSection>
                </apex:pageBlock>

                <div class="panel-heading"><label>xMatters Person Detail</label>

                    <apex:outputPanel id="alertmessage">
                        <apex:outputPanel rendered="{!(isPersonMatch && !IsXmPerson)}">
                            <div class="alert alert-info message-alert" style="height:45px;">
                                <p style="float:left;padding-right:10px;padding-top:5px;">
                                    <!--We found a match for this Contact in Xmatters; Please click on Associate button to associate this contact with the Xmatters Person-->
                                        {!$Label.XM_Notification_Associate_Contact}
                                </p>
                            </div>
                        </apex:outputPanel>
                        <apex:outputPanel rendered="{!(IF(isPersonMatch, False, True) && !IsXmPerson)}">
                            <div class="alert alert-info message-alert" style="height:45px;">
                                <p style="float:left; padding-right:10px;padding-top:5px;">
                                    <!--No Matching Person record Found in Xmatters for this contact. Please click Add to create a record in Xmatters-->
                                        {!$Label.XM_Notification_Add_Person}
                                </p>
                            </div>
                        </apex:outputPanel>
                    </apex:outputPanel>
                    <apex:actionFunction name="callAssociateContact" action="{!associateContact}" reRender="contactList,alertmessage,alertbuttons, errorMessages,timezone,devicePanel,groupPanel" onComplete="loaddeviceAndGroups();">
                        <apex:param id="rowId" name="rowId" value="" />
                    </apex:actionFunction>

                    <apex:actionFunction name="callDissociateContact" action="{!dissociateContact}" reRender="contactList,alertmessage,alertbuttons, errorMessages,timezone,devicePanel,groupPanel" onComplete="loaddeviceAndGroups();" status="dissociatePersonStatus">
                        <apex:param id="removeId" name="removeId" value="" />
                    </apex:actionFunction>



                    <apex:actionFunction name="callNotificationManage" action="{!addPerson}" reRender="contactList,alertmessage, alertbuttons, errorMessages,timezone,devicePanel,groupPanel" onComplete="loaddeviceAndGroups();" status="addPersonStatus"/>

                </div>
                <div class="panel-body">
                    <div class="row">
                        <div class="form-group col-md-3">

                            <label for="firstName" class="col-2 col-form-label">First Name </label>
                            <div class="col-10" >
                                <apex:outputText value="{!person.firstName}" id="firstName" styleClass="form-control" style="background-color: lightgray;"/>
                            </div>
                        </div>
                        <div class="form-group col-md-3">
                            <label for="lastName" class="col-2 col-form-label">Last Name </label>
                            <div class="col-10">
                                <apex:outputText value="{!person.lastName}" id="lastName" styleClass="form-control" style="background-color: lightgray;"/>
                            </div>
                        </div>
                        <div class="form-group col-md-3">
                            <label for="status" class="col-2 col-form-label"> Notification Profile Status </label>
                            <div class="col-10">
                                <apex:outputText value="{!person.status}" id="status" styleClass="form-control" style="background-color: lightgray;"/>
                            </div>
                        </div>

                        <div class="form-group col-md-2">
                            <label for="timezone" class="col-2 col-form-label">Time Zone </label>
                            <div class="col-10">
                                <apex:selectList styleClass="form-control timezone" value="{!person.timezone}" id="timezone" size="0" style="width:80%" disabled="{!(isPersonMatch || IsXmPerson)}">
                                    <apex:selectOptions value="{!Timezones}"/>
                                </apex:selectList>
                            </div>
                        </div>
                        <div class="form-group col-md-1">
                            <br/>
                            <apex:outputPanel id="alertbuttons">
                                <apex:outputPanel rendered="{!(isPersonMatch && !IsXmPerson)}">
                                        <apex:actionStatus id="associateContact" >
                                            <apex:facet name="stop">
                                                <apex:commandButton value="Enable" onClick="associateContactCall(); return false;" status="associateContact"/>
                                            </apex:facet>
                                            <apex:facet name="start">
                                                <apex:outputPanel >
                                                    <apex:image value="/img/loading32.gif" style="height: 15px;"/>
                                                    <apex:commandButton styleClass="k-button"  value="Adding..." status="associateContact" disabled="true"/>
                                                </apex:outputPanel>
                                            </apex:facet>
                                        </apex:actionStatus>
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!(IF(isPersonMatch, False, True) && !IsXmPerson)}">
                                        <apex:actionStatus id="addPersonStatus" >
                                            <apex:facet name="stop">
                                                <apex:commandButton value="Enable" onClick="AddPerson();return false;"  status="addPersonStatus"/>
                                            </apex:facet>
                                            <apex:facet name="start">
                                                <apex:outputPanel >
                                                    <apex:image value="/img/loading32.gif" style="height: 15px;"/>
                                                    <apex:commandButton styleClass="k-button"  value="Adding..." status="addPersonStatus" disabled="true"/>
                                                </apex:outputPanel>
                                            </apex:facet>
                                        </apex:actionStatus>
                                </apex:outputPanel>
                                <apex:outputPanel rendered="{!IsXmPerson}" style="margin-left:15px;" >
                                    <apex:actionStatus id="dissociatePersonStatus" >
                                        <apex:facet name="stop">
                                            <apex:commandButton value="Disable Contact" title="Dissociate xmPerson from this contact" onClick="callDissociateContact('{!currentContact.Id}');return false;"  status="dissociatePersonStatus"/>
                                        </apex:facet>
                                        <apex:facet name="start">
                                            <apex:outputPanel >
                                                <apex:image value="/img/loading32.gif" style="height: 15px;"/>
                                                <apex:commandButton styleClass="k-button"  value="Removing..." status="dissociatePersonStatus" disabled="true"/>
                                            </apex:outputPanel>
                                        </apex:facet>
                                    </apex:actionStatus>
                                </apex:outputPanel>

                            </apex:outputPanel>
                        </div>
                    </div>

                </div>
            </div>


            <apex:pageBlock id="contactList" rendered="{!contactList.size > 0}">
                <apex:pageBlockSection collapsible="true"  columns="1" showHeader="true" title="Other Associated Accounts" id="duplicateContacts">

                    <apex:dataTable value="{!customContactList}" var="con"  styleClass="table table-bordered table-condensed" >

                        <apex:column >
                            <apex:facet name="header">Account Name</apex:facet>
                            <div>
                            <a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion" href="#collapse{!con.ContactId}" style="font-size: 1.30rem;float:left;"/>
                            <apex:outputLink value="/{!con.AccountId}" target="_blank" style="text-decoration:underline">{!con.AccountName}</apex:outputLink>
                            </div>
                            <div id="collapse{!con.ContactId}" class="panel-collapse collapse">
                                <ul class="noindent">
                                    <apex:repeat value="{!con.ProductClusters}" var="product">
                                        <li>{!product.Product} <i class="glyphicon glyphicon-arrow-right"></i> {!product.Cluster} </li>
                                    </apex:repeat>
                                </ul>

                            </div>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">BU Account #</apex:facet>
                            <apex:outputLink value="/{!con.AccountId}" target="_blank" style="text-decoration:underline">{!con.CadebillAccountNum}</apex:outputLink>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">First Name</apex:facet>
                            <apex:outputLink value="/{!con.ContactId}" target="_blank"  style="text-decoration:underline">{!con.ContactFirstName}</apex:outputLink>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">Last Name</apex:facet>
                            <apex:outputLink value="/{!con.ContactId}" target="_blank"  style="text-decoration:underline">{!con.ContactLastName}</apex:outputLink>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">Status</apex:facet>
                            <apex:outputText rendered="{!ISBLANK(con.xmPersonId)}" value="Not Associated">
                            </apex:outputText>
                            <apex:outputText rendered="{!!ISBLANK(con.xmPersonId)}" value="Associated">
                            </apex:outputText>
                        </apex:column>
                    </apex:dataTable>
                </apex:pageBlockSection>
            </apex:pageBlock>
            <apex:outputPanel id="devicePanel" style="{!IF( isXmPerson, 'display: inline;', 'display: none;')}">
                <apex:pageBlock id="deviceBlock">
                    <apex:pageBlockSection collapsible="false"  columns="1" showHeader="true" title="Devices"/>
                    <div id="deviceList"></div>
                </apex:pageBlock>
            </apex:outputPanel>
            <apex:outputPanel id="groupPanel" style="{!IF( isXmPerson, 'display: inline;', 'display: none;')}">
                <apex:pageBlock id="groupBlock">
                    <apex:pageBlockSection collapsible="false"  columns="1" showHeader="true" title="Groups"/>
                    <div class="row" style="margin-top : 5px;">
                        <div class="col-md-5"> <input class="form-control" id="SearchText" onkeyup="SearchProducts(this.value)" type="text" placeholder="Search Products">
                            <span class="glyphicon glyphicon-search" style="font-size: normal"></span></input></div>
                        <div class="col-md-7">
                            <div class="form-group">
                                <label for="notificationtype" style="padding-right:5px;">Notification Type</label>
                                <select class="form-control" id="notificationtype" onchange="updateGrouptable(this);" style="width:26%;">
                                    <option selected="true">Event Notification</option>
                                    <option>Maintenance Notification</option>
                                </select>
                            </div>

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-2"> </div>
                        <div class="col-md-10">
                            <apex:outputPanel id="helpTextPanel">
                                <apex:outputPanel rendered="{!displayBatchStatusText}">
                                    <p class="text-danger"> Note: There are pending group subscription updates which may take up to 30 minutes to process. The next update will run in approximately {!nextFireTime} </p>
                                </apex:outputPanel>
                            </apex:outputPanel>
                            <apex:actionPoller action="{!batchStatus}" reRender="helpTextPanel" interval="10"/>
                        </div>
                    </div>
                    <div id="groupList"></div>
                    <div style="margin-top:8px;" class="row" >

                        <div class="col-md-9 col-md-push-3">
                            <a class="k-button btn btn-primary" onclick="updateGroups();" style="float:right;background: #0275d8; color:white;">Update Group Subscription</a>
                            <a class="k-button btn btn-secondary" onclick="setupGroupList();" style="float:right;background: #0275d8; color:white;">Clear All Selection</a>

                        </div>


                    </div>
                </apex:pageBlock>
            </apex:outputPanel>

        </div>
        <!-- Information Modal -->
        <div class="modal fade" id="info" tabindex="-1" role="dialog" aria-labelledby="info" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="infolabel">Manage Time Frames</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>

                    <div class="modal-body" style="font-size:14px;" id="infoModal">
                        <div class="row" style="padding: 10px 10px 10px 10px;">
                            <span style="color: #5270c7;">{!timezoneDisplayName}</span>
                            <a href="#" id="btnAdd" onclick="addNewTab();" style="float:right;"><i class="glyphicon glyphicon-plus"></i> Add New</a>
                        </div>
                        <div id="validation-errors" class=" alert alert-danger message-alert" style="margin-top:15px;"></div>
                        <ul class="nav nav-tabs" id="tabs">

                        </ul>
                        <div class="tab-content">

                        </div>

                    </div>


                    <div class="modal-footer">
                        <button type="button" class="btn button-timeframe" onclick = "saveTimeFrames(); return false;">Save</button>
                        <button type="button" class="btn button-timeframe-cancel" data-dismiss="modal" style="color:black !important;">Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Confirmation Modal -->
        <div class="modal fade" id="warning" tabindex="-1" role="dialog" aria-labelledby="warning" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel" style="font-weight:bold">Alert</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" style="font-size:14px;">
                        <div id="java-errors" class=" alert alert-danger message-alert" style="margin-left:15px;width:90%; display:none;"></div>
                        <div id="success" class=" alert alert-success message-alert" style="margin-left:15px;width:90%; display:none;"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn button-cancel" data-dismiss="modal" style="color:black !important;">OK</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- loading Modal -->
        <div class="modal fade" id="loading" tabindex="-1" role="dialog" aria-labelledby="info" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content" style="width:40%; top: 182px;">
                    <div class="modal-body" style="font-size:14px;">
                        <div class="spinnerClass">Updating groups in xMatters</div>
                    </div>
                </div>
            </div>
        </div>


    </apex:form>

    <script>

    var resturnedResult;

     $(document).ready(function() {
            loaddeviceAndGroups();
            var notificationtype = $("#notificationtype");
            notificationtype.data("prev",notificationtype.val());
            if($("div[id$='duplicateContacts']").length > 0){
                twistSection($("div[id$='duplicateContacts']").find('img')[0]);
            }


         });

    function setFocusOnLoad() {}
    var timeframes = [];
    var devices = [];
    var deviceData = new Object();
    var notificationType = "eventType";

    function AddPerson(){
        callNotificationManage();

       // setupDeviceList();
    }

	function loaddeviceAndGroups(){
        setupDeviceList();
		setupGroupList();


     }
    function associateContactCall(){
        callAssociateContact();

        //setupDeviceList();
    }
    function setupDeviceList(){
               var device =new kendo.data.DataSource({
                    autosync:true,
                    transport:{
                      read: function(options){
                               XMPersonManagementController.getUserDevices(
                                      //'{!XmPersonId}',
                                      '{!$CurrentPage.parameters.id}',
                                      function(result,event)
                                      {
                                          if (event.status) {
                                              if(result.length > 1){
                                                  timeframes = [];
                                                  devices = [];
                                                   options.success(JSON.parse(result));
                                                   resturnedResult = JSON.parse(result);
                                                    for(var i = 0; i< resturnedResult.length; i++){
                                                        devices.push(resturnedResult[i].name);
                                                        var tframe = resturnedResult[i].timeframes;
                                                        for(var k = 0; k< tframe.length; k++){
                                                            timeframes.push({
                                                                days : tframe[k].days,
                                                                endTime : tframe[k].endTime,
                                                                startTime : tframe[k].startTime,
                                                                name : tframe[k].name,
                                                                deviceId : resturnedResult[i].deviceId
                                                            });
                                                        }
                                                    }
                                              console.log('results =>' + JSON.stringify(result));
                                              hideError();
                                              }
                                            if(resturnedResult.length >= 3){
                                                $(".k-grid-add").hide();
                                            }
                                            } else if (event.type === 'exception') {
                                                 $("div#success").css("display", "none");
                                                   displayError(event.message);
                                            } else {
                                                 $("div#success").css("display", "none");
                                                displayError(event.message);
                                            }
                                      },
                                      {escape: false}
                               );
                            },
                        update: function(options){
                            var objResult = new Object();
                            objResult.name = options.data.name ;
                            objResult.deviceValue = options.data.deviceValue ;
                            objResult.priorityThreshold = "Medium";
                            objResult.deviceId = options.data.deviceId ;
                            objResult.timeframes = options.data.timeframes;
                            XMPersonManagementController.updateDevice (
                                JSON.stringify(objResult),
                                function(result,event)
                                {
                                  if (event.status) {
                                       var returnResult = JSON.parse(result);
                                       if(returnResult.result != 'Failed'){
                                           options.success();
                                            hideError();
                                       }
                                       else{
                                            $("div#success").css("display", "none");
                                           displayError(returnResult.message);
                                       }
                                       console.log('results =>' + returnResult.result);
                                    } else if (event.type === 'exception') {
                                         $("div#success").css("display", "none");
                                          displayError(event.message);
                                    } else {
                                         $("div#success").css("display", "none");
                                         displayError(event.message);
                                    }
                                },
                                {escape: false}
                            );
                        },
                        create: function(options){

                              XMPersonManagementController.addNewDevice(
                                      //{!xmPersonId},
                                      '{!$CurrentPage.parameters.id}',
                                      options.data.name,
                                      options.data.deviceValue,
                                      function(result,event)
                                      {
                                          if (event.status) {
                                                 var returnResult = JSON.parse(result);
                                              if(returnResult.result != 'Failed'){
                                                   options.success();
                                                   setupDeviceList();
                                                   hideError();
                                                   setupGroupList();
                                               }
                                               else{
                                                    $("div#success").css("display", "none");
                                                   displayError(returnResult.message);
                                               }

                                            } else if (event.type === 'exception') {
                                                 $("div#success").css("display", "none");
                                              displayError(event.message);
                                            } else {
                                                 $("div#success").css("display", "none");
                                                 displayError(event.message);
                                            }
                                      },
                                      {escape: false}
                               );
                        },
                        destroy: function(options){
                             XMPersonManagementController.deleteDevice(
                                       options.data.deviceId,
                                      function(result,event)
                                      {
                                              if (event.status) {
                                                 var returnResult = JSON.parse(result);
                                              if(returnResult.result != 'Failed'){

                                                        $(".k-grid-add").show();


                                                   options.success();
                                                   setupDeviceList();
                                                   setupGroupList();
                                                   hideError();
                                               }
                                               else{
                                                    $("div#success").css("display", "none");
                                                   displayError(returnResult.message);
                                               }

                                            } else if (event.type === 'exception') {
                                                 $("div#success").css("display", "none");
                                              displayError(event.message);
                                            } else {
                                                 $("div#success").css("display", "none");
                                                 displayError(event.message);
                                            }
                                      },
                                      {escape: false}
                               );
                        }
                      },
                    schema:{
                        model: {
                            id: "Id",
                            fields: {
                                "Id": {from:"deviceId", type: "string"},
                                "DeviceType": { from: "name", type: "string", },
                                "PriorityThreshold":{from:"priorityThreshold",type:"string"},
                                "DeviceValue" : {from:"deviceValue",
                                                 type: "string",
                                                 validation: {

                                                    deviceValueValidation: function (input) {
                                                         var deviceGrid = $("#deviceList").data("kendoGrid"),
                                                            dataItem = deviceGrid.dataItem($(input).closest("tr"));
                                                        if(dataItem){
                                                            if (input.is("[name='DeviceValue']") && input.val() != "") {
                                                                input.removeAttr("data-deviceValueValidation-msg");
                                                                var deviceType = $("[name='DeviceType']").val();
                                                                dataItem.DeviceValue = input.val().trim();
                                                                if(deviceType.includes("Email")){
                                                                     var re =  /^(?:[a-z0-9!+=_`-]+(?:\.[a-z0-9!+=_`-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)$/i;
                                                                     if(!re.test(input.val().trim())){
                                                                         input.attr("data-deviceValueValidation-msg", " Invalid Email address");
                                                                         return false;
                                                                     }
                                                                     return true;
                                                                }else{

                                                                    var re = /^[+]*[(]{0,1}[0-9]{1,3}[)]{0,1}[-\s\./0-9]*$/g;
                                                                    if(!re.test(input.val().trim()) || input.val().length != 10){
                                                                         input.attr("data-deviceValueValidation-msg", " Phone numbers should be 10 digits with no spaces or dashes");
                                                                         return false;
                                                                    }else{
                                                                          var tempstring = input.val().trim();
                                                                         if (tempstring.substring(0,2) !== '+1' && tempstring.length == 10){
                                                                            input.val('+1' + input.val());
                                                                            dataItem = deviceGrid.dataItem($(input).closest("tr"));
                                                                            dataItem.DeviceValue = input.val().trim();
                                                                        }
                                                                        tempstring = input.val().trim();
                                                                        if (tempstring.substring(0,1) !== '+' && tempstring.length == 11 && tempstring.substring(1,2) == '1')
                                                                        {
                                                                            input.val('+' + input.val());
                                                                            dataItem = deviceGrid.dataItem($(input).closest("tr"));
                                                                            dataItem.DeviceValue = input.val().trim();
                                                                        }
                                                                    }
                                                                return true;
                                                            }
                                                            }else if(input.is("[name='DeviceValue']") && input.val() == ""){
                                                                //dataItem.DeviceValue = input.val().trim();
                                                                input.attr("data-deviceValueValidation-msg", " Device Value is required");
                                                                return false;
                                                            }
                                                        }
                                                        return true;
                                                    }
                                                 }
                                                 },
                                "TimeFrame":{editable: false, nullable: true}

                        }
                    }
                  }
              });

              $("#deviceList").kendoGrid({
                  dataSource: device,
                  editable: {
                    mode:"inline",
                    confirmation: "Are you sure you want to delete a device?"
                  },
                  scrollable: true,
                  noRecords: true,
                  height: 210,
                  edit:disablePicklist,
                  toolbar: [
                      {
                          name: "create",
                          text: "Add Device"
                      }
                      ],
                  columns: [{
                                field:"Id",
                                filterable: false,
                                hidden: true

                            },
                            {
                                field:"DeviceType",
                                title:"Device Type",
                                editor: DeviceTypePicklistEditor
                            },
                            {
                                field: "DeviceValue",
                                title: "Value"
                            },
                            {
                                field:"TimeFrame",
                                title:"Time Frames",
                                editable:false,
                                width:350,
                                //template: '<a href="" onClick="OpenModal(this); return false;" style="text-decoration: underline;">Manage TimeFrames</a>'
                                template: '#if(data.DeviceType.indexOf("Email") > -1){#<span style="text-decoration: underline;padding-left: 10px;">24X7</span>#}else{#<a href="" onClick="OpenModal(this); return false;" class="k-button k-button-icontext">Manage</a>#}#'
                            },
                            {   title:"Action",
                                command: ["edit","destroy"]
                            }

                  ]

              });
       }


        function displayError(message){
             $("div#success").empty();
             $("div#success").hide();
             $("div#java-errors").css("display", "block");
             document.getElementById("java-errors").innerHTML =  message;
              $('#warning').modal('show');
             console.log('error =>' + message);
        }


         function hideError(){
             $("div#java-errors").css("display", "none");
             document.getElementById("java-errors").innerHTML = ' ';
            }

         function disablePicklist(e){
             if(!e.model.isNew()){
                  var indexCell = e.container.contents()[1];
                  $(indexCell).find("input").data("kendoDropDownList").enable(false);
             } else if(e.model.isNew()){
                 var indexCell = e.container.contents()[3];
                 $(indexCell).find("a.k-button").attr("disabled", "disabled");
                 var buttonCell = e.container.contents()[4];
                 $(buttonCell).find("a.k-primary").html('<span class="k-icon k-i-update"></span> Add');
             }
         }


        function DeviceTypePicklistEditor(container, options) {


            var filteredDeviceTypes = [];
            if(options.model.id == ''){
            var gridData = $("#deviceList").data("kendoGrid").dataSource.data();
            var griddeviceTypes = [];
            var originaldeviceTypes = {!DeviceTypes};
            for(var i = 0; i < gridData.length; i++){
                griddeviceTypes.push(gridData[i].DeviceType);
            }

            originaldeviceTypes.forEach(function(a,i){
                console.log(a);
                if(griddeviceTypes.indexOf(a) == -1){
                    filteredDeviceTypes.push(a);
                }
                });
            }else{
                filteredDeviceTypes = {!DeviceTypes};
            }



                 $('<input style="width:95%" required  id="DeviceType" name="DeviceType"  data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    autobind: false,
                    change: updateTFMessage,
                    dataSource: {
                        data:filteredDeviceTypes
                    },
                    value: options.model.DeviceType
                  });

            }

        function updateTFMessage(e){
            console.log('came here ');
            var selectedVal = this.value();
            var parentRow = this.element.parents("tr.k-grid-edit-row"),
                timeFrameCell = parentRow.find("td")[3],
                deviceValueCell = parentRow.find("td")[2],
                htmlText = '';
            if(selectedVal == 'SMS Phone'){
               var htmlText = "<br/><p class='mesageTF' style='font-size:13px; white-space:nowrap;'>You can manage time frames after you add the device.</p>";
                $(timeFrameCell).append(htmlText);
                var phoneNumber = "{!currentContact.MobilePhone}";
                phoneNumber = phoneNumber.replace(/[^0-9]/g, '');
                $(deviceValueCell).find("input.k-input").val(phoneNumber);
            }else{
                $(timeFrameCell).find("p.mesageTF").remove();
                if(selectedVal == 'Work Email'){
                    $(deviceValueCell).find("input.k-input").val("{!currentContact.Email}");
                }
            }



        }

        var start, end;
        function OpenModal(sender){

            var selectedRow = $(sender).parent().parent();
            var rowData = $('#deviceList').data("kendoGrid").dataItem(selectedRow);
             var deviceId = rowData.Id;
            if(deviceId == null || deviceId == ''){
                 displayError("Please save the device before adding the time frames.");

            }else{

                deviceData = new Object();
                deviceData.deviceId = rowData.Id;
                deviceData.name = rowData.DeviceType;
                deviceData.deviceValue = rowData.DeviceValue ;

                addExistingTab(deviceId);
                $('#info').modal('show');
            }

        }


        function startChange(sender) {
                        var startTime = start.value();

                        if (startTime) {
                            startTime = new Date(startTime);

                            end.max(startTime);

                            startTime.setMinutes(startTime.getMinutes() + this.options.interval);

                            end.min(startTime);
                            end.value(startTime);
                        }
             }

        function addNewTab(){

            var nextTab = $('#tabs li').length+1;
            $('<li><a href="#tab'+nextTab+'" data-toggle="tab">New</a></li>').appendTo('ul#tabs');
            var divContent = '<div id="tab'+nextTab+'" class="tab-pane fade">'
                            + ' <div class="form-group">'
                            + '<label for="nameInput'+nextTab+'" class="col-2 col-form-label">Name </label>'
                            + '<div class="col-10">'
                            + '<input class="form-control" type="text" onkeypress = "validateKeyPress(event);" id="nameInput'+nextTab+'" style="width:30%;" required="true"/>'
                            + '</div></div>'
                            + '<div class="form-group timepicker">'
                            + '<label for="startTimeInput'+nextTab+'" class="col-2 col-form-label">Start Time</label>'
                            + '<div class="col-10">'
                            + '<input class="form-control" id="startTimeInput'+nextTab+'"  style="width:15%;"/>'
                            + '</div></div>'
                            + '<div class="form-group timepicker">'
                            + '<label for="endTimeInput'+nextTab+'" class="col-2 col-form-label">End Time</label>'
                            + '<div class="col-10">'
                            + '<input class="form-control" type="email" id="endTimeInput'+nextTab+'"  style="width:15%;"/>'
                            + '</div></div>'
                            + '<div class="form-group">'
                            + '<label for="DaysInput" class="col-2 col-form-label">Days</label>'
                            + '<div class="weekDays-selector weekDays-selectorNew">'
                            + '<input type="checkbox" id="weekday-mon-new'+nextTab+'" class="weekday monday" checked="true"/>'
                            + '<label for="weekday-mon-new'+nextTab+'">Mon</label>'
                            + '<input type="checkbox" id="weekday-tue-new'+nextTab+'" class="weekday tuesday" checked="true"/>'
                            + '<label for="weekday-tue-new'+nextTab+'">Tue</label>'
                            + '<input type="checkbox" id="weekday-wed-new'+nextTab+'" class="weekday wednesday" checked="true" />'
                            + '<label for="weekday-wed-new'+nextTab+'">Wed</label>'
                            + '<input type="checkbox" id="weekday-thu-new'+nextTab+'" class="weekday thursday" checked="true"/>'
                            + '<label for="weekday-thu-new'+nextTab+'">Thu</label>'
                            + '<input type="checkbox" id="weekday-fri-new'+nextTab+'" class="weekday friday" checked="true"/>'
                            + '<label for="weekday-fri-new'+nextTab+'">Fri</label>'
                            + '<input type="checkbox" id="weekday-sat-new'+nextTab+'" class="weekday saturday" checked="true"/>'
                            + '<label for="weekday-sat-new'+nextTab+'">Sat</label>'
                            + '<input type="checkbox" id="weekday-sun-new'+nextTab+'" class="weekday sunday" checked="true"/>'
                            + '<label for="weekday-sun-new'+nextTab+'">Sun</label>'
                            + '</div></div></div>';

           $(divContent).appendTo('div.tab-content');

            var startId = '#startTimeInput' + nextTab;
            var endId = '#endTimeInput' + nextTab;
            addKendoTimePicker(startId, endId);
           $('#tabs a:last').tab('show');
        }

      function addExistingTab(deviceId){
            $('div.tab-content').empty();
            $('ul#tabs').empty();
            $("div#validation-errors").css("display", "none");
             $("div#validation-errors").empty();
              var tabClass = 'active',
                    contentClass = 'in active',
                    toggleActive = true;
            for(var i = 0; i < timeframes.length; i++){
                 if(deviceId === timeframes[i].deviceId){
                        if(toggleActive){
                            tabClass = 'active',
                            contentClass = 'in active';
                        }else{
                            tabClass = '',
                            contentClass = '';
                        }

                        toggleActive = false;
                        var name = timeframes[i].name.replace(/\s+/g, '-');

                      $('<li class="'+tabClass+'"><a href="#tab'+name+'" data-toggle="tab">'+timeframes[i].name+'&nbsp;&nbsp<button type="button" title="Delete time frame" class="close" onclick="deleteTimeFrame(this, \'tab'+name+'\');" aria-label="Close"><span aria-hidden="true">&times;</span></button></a></li>').appendTo('ul#tabs');
                      divContent = '<div id="tab'+name+'" class="tab-pane fade '+contentClass+'">'
                                   + ' <div class="form-group">'
                                    + '<label for="nameInput'+i+'" class="col-2 col-form-label">Name </label>'
                                    + '<div class="col-10">'
                                    + '<input class="form-control" type="text" onkeypress = "validateKeyPress(event);" id="nameInput'+name+'" style="width:30%;" value="'+ timeframes[i].name +'"/>'
                                    + '</div></div>'
                                    + '<div class="form-group timepicker">'
                                    + '<label for="startTimeInput" '+name+'"  class="col-2 col-form-label">Start Time</label>'
                                    + '<div class="col-10">'
                                    + '<input class="form-control" id="startTimeInput'+name+'"  style="width:15%;" value="'+ timeframes[i].startTime +'"/>'
                                    + '</div></div>'
                                    + '<div class="form-group timepicker">'
                                    + '<label for="endTimeInput'+name+'" class="col-2 col-form-label">End Time</label>'
                                    + '<div class="col-10">'
                                    + '<input class="form-control" type="email" id="endTimeInput'+name+'" style="width:15%;" value="'+ timeframes[i].endTime +'"/>'
                                    + '</div></div>'
                                    + '<div class="form-group">'
                                    + '<label for="DaysInput" class="col-2 col-form-label">Days</label>'
                                    + '<div class="weekDays-selector">'
                                    + '<input type="checkbox" id="weekday-mon'+name+'" class="weekday monday '+name+'"/>'
                                    + '<label for="weekday-mon'+name+'">Mon</label>'
                                    + '<input type="checkbox" id="weekday-tue'+name+'" class="weekday tuesday '+name+'"/>'
                                    + '<label for="weekday-tue'+name+'">Tue</label>'
                                    + '<input type="checkbox" id="weekday-wed'+name+'" class="weekday wednesday '+name+'"/>'
                                    + '<label for="weekday-wed'+name+'">Wed</label>'
                                    + '<input type="checkbox" id="weekday-thu'+name+'" class="weekday thursday '+name+'"/>'
                                    + '<label for="weekday-thu'+name+'">Thu</label>'
                                    + '<input type="checkbox" id="weekday-fri'+name+'" class="weekday friday '+name+'"/>'
                                    + '<label for="weekday-fri'+name+'">Fri</label>'
                                    + '<input type="checkbox" id="weekday-sat'+name+'" class="weekday saturday '+name+'"/>'
                                    + '<label for="weekday-sat'+name+'">Sat</label>'
                                    + '<input type="checkbox" id="weekday-sun'+name+'" class="weekday sunday '+name+'"/>'
                                    + '<label for="weekday-sun'+name+'">Sun</label>'
                                    + '</div> </div></div>';


                      $(divContent).appendTo('div.tab-content');
                      var startId = '#startTimeInput' + name;
                      var endId = '#endTimeInput' + name;
                       addKendoTimePicker(startId, endId);

                       $("div.weekDays-selector input[type=checkbox]").each(function(){
                             if($(this).hasClass("monday") && $(this).hasClass(name))
                                    this.checked = timeframes[i].days["monday"];
                             if($(this).hasClass("tuesday") && $(this).hasClass(name))
                                    this.checked = timeframes[i].days["tuesday"];
                             if($(this).hasClass("wednesday") && $(this).hasClass(name))
                                    this.checked = timeframes[i].days["wednesday"];
                             if($(this).hasClass("thursday")&& $(this).hasClass(name))
                                    this.checked = timeframes[i].days["thursday"];
                             if($(this).hasClass("friday")&& $(this).hasClass(name))
                                    this.checked = timeframes[i].days["friday"];
                             if($(this).hasClass("saturday")&& $(this).hasClass(name))
                                    this.checked = timeframes[i].days["saturday"];
                             if($(this).hasClass("sunday")&& $(this).hasClass(name))
                                    this.checked = timeframes[i].days["sunday"];
                       });
                 }
            }

      }

     function deleteTimeFrame(sender, deleteTimeFrameObj){
         console.log('came into onclick event ==>' + deleteTimeFrameObj);
         var userErrMessage  = 'You must click on save to delete the time frame(s) from xMatters.'
         deleteTimeFrameObj = '#' + deleteTimeFrameObj.replace(/\s+/g, '-');
         var numOfTabs = $('div.tab-content div.tab-pane').length;
         if(numOfTabs > 1)
         {
              $(deleteTimeFrameObj).remove();
              $(sender).parent().parent().remove();
              $('#tabs a:first').tab('show')

              if($("div#validation-errors").children().children().text() == "" || $("div#validation-errors").children().children().text() == null)
              {
                  $("div#validation-errors").css("display", "block");
                  var errorString = '<ul><li>'+userErrMessage+'</li></ul>';
                  $(errorString).appendTo("div#validation-errors");
              }
         }
         else
         {
              if($("div#validation-errors").children().children().text() == "" || $("div#validation-errors").children().children().text() == null || $("div#validation-errors").children().children().text() == userErrMessage)
              {
                  $("div#validation-errors").css("display", "block");
                  var errorString = '<ul><li>You must have at least one time frame.</li></ul>';
                  $(errorString).appendTo("div#validation-errors");
                  return false;
              }
         }
     }

     function validateKeyPress(event){
         var valid = (event.which >= 48 && event.which <= 57) || (event.which >= 65 && event.which <= 90) || (event.which >= 97 && event.which <= 122) || (event.which == 32);
         if (!valid) {
             event.preventDefault();
         }
     }

     function addKendoTimePicker(startId, endId){
            //init start timepicker
            end = $(endId).kendoTimePicker().data("kendoTimePicker");
            start = $(startId).kendoTimePicker({
                change: function(e){
                       var startTime = this.value();
                        var endTImePicker = this.element.parents().eq(3).next('div.form-group').find("input.k-input").data("kendoTimePicker");

                        if (startTime) {
                            startTime = new Date(startTime);
                           // endTImePicker.max(startTime);
                            startTime.setMinutes(startTime.getMinutes() + this.options.interval);
                            endTImePicker.min(startTime);
                            endTImePicker.value(startTime);
                        }
                }
            }).data("kendoTimePicker");

            var startTime = new Date(start.value());
            startTime.setMinutes(startTime.getMinutes() + start.options.interval);
            end.min(startTime);
             $(endId).attr("readonly", true);
             $(startId).attr("readonly", true);

            //init end timepicker

     }

     function saveTimeFrames(){
        var timeframesUpdate = [];
        var timeframeNames = [];
        var isError = false;
        $("div.tab-content div.tab-pane").each(function(){
             var days = new Object();
             var thisId = $(this).attr('id');
             var rowId = thisId.substring(3);
             var nameId = 'input#nameInput' + rowId ;
             var nameVal = $(this).find(nameId).val();

             isError = validateInput(nameVal, nameId);
             if(nameVal != ''){
                 timeframeNames.push(nameVal);
             }
             var startTimeId = 'input#startTimeInput' + rowId;
             var startTimeVal = $(this).find(startTimeId).val();
             var startTimepicker = $(startTimeId).data("kendoTimePicker");

             if(!isError)
               isError = validateInput(startTimeVal, startTimeId);

             var endTimeId = 'input#endTimeInput' + rowId;
             var endTimeVal = $(this).find(endTimeId).val();
             if(endTimeVal == '12:00 AM' && startTimeVal != '12:00 AM')
                endTimeVal = '11:59 PM';
             var endTimepicker = $(endTimeId).data("kendoTimePicker");
           //  endTimepicker.destroy();
             if(!isError)
               isError = validateInput(endTimeVal, endTimeId);


             $(this).find("div.weekDays-selector input[type=checkbox]").each(function(){
                 if($(this).hasClass("monday") && this.checked)
                    days.monday = true;
                 if($(this).hasClass("tuesday") && this.checked)
                    days.tuesday = true;
                 if($(this).hasClass("wednesday") && this.checked)
                    days.wednesday = true;
                 if($(this).hasClass("thursday") && this.checked)
                    days.thursday = true;
                 if($(this).hasClass("friday") && this.checked)
                     days.friday = true;
                 if($(this).hasClass("saturday") && this.checked)
                    days.saturday = true;
                 if($(this).hasClass("sunday") && this.checked)
                     days.sunday = true;

             });
             var currentTimeZone = $("select.timezone").val();
                timeframesUpdate.push({
                            days : days,
                            endTime : endTimeVal,
                            startTime : startTimeVal,
                            name : nameVal,
                            timezone : currentTimeZone
                           });
         });


         if(!isError){
                removeError();
             var hasDupe = hasDuplicates(timeframeNames);
             if(hasDupe){

                 $("div#validation-errors").css("display", "block");
                 var errorString = '<ul><li>Duplicate time frames are not allowed.</li></ul>';
                 $(errorString).appendTo("div#validation-errors");
             }
             else{
                 removeError();
                 var deviceUpdate = new Object();
                 deviceUpdate.name = deviceData.name ;
                 deviceUpdate.deviceValue = deviceData.deviceValue ;
                 deviceUpdate.priorityThreshold = "Medium";
                 deviceUpdate.deviceId = deviceData.deviceId ;
                 deviceUpdate.timeframes = timeframesUpdate;
                  $('#info').modal('hide');
                 console.log('deviceupdate ==>' + JSON.stringify(deviceUpdate));
                 XMPersonManagementController.updateDevice (
                        JSON.stringify(deviceUpdate),
                        function(result,event){
                            if (event.status) {
                                 var returnResult = JSON.parse(result);
                                 if(returnResult.result != 'Failed'){
                                       hideError();
                                      $("div#success").css("display", "block");
                                      $("div#success").empty();
                                      $('<strong>Time frame(s) were updated successfully</strong>').appendTo("div#success");
                                      $('#warning').modal('show');
                                      var grid = $("#deviceList").data("kendoGrid");
                                      grid.destroy();
                                      setupDeviceList();

                                     }
                                     else{
                                           $("div#success").css("display", "none");
                                         displayError(returnResult.message);
                                     }
                            } else if (event.type === 'exception') {
                                 $("div#success").css("display", "none");
                               displayError(event.message);
                            } else {
                                 $("div#success").css("display", "none");
                               displayError(event.message);
                            }
                        },
                        {escape: false}
                 );
             }

         }
     }

    function hasDuplicates(array) {
        var valuesSoFar = [];
        for (var i = 0; i < array.length; ++i) {
            var value = array[i];
            if (valuesSoFar.indexOf(value) !== -1) {
                return true;
            }
            valuesSoFar.push(value);
        }
        return false;
    }

    function validateInput(val, input){
         if(val == ''){
             removeError();
             $("div#validation-errors").css("display", "block");
             var errorString = '<ul>'
             if(input.includes('nameInput')){
                errorString += '<li>Name is a required field</li>';
                $(input).addClass('has-error');
             }
             else if(input.includes('startTime')){
                 errorString += '<li>Start Time is a required field</li>';
                  $(input).parent().addClass('has-error');
             }
             else if(input.includes('endTime')){
                 errorString += '<li>End Time is a required field</li>';
                 $(input).parent().addClass('has-error');
             }
              errorString += '</ul>'

             $(errorString).appendTo("div#validation-errors");
             return true;
         }
         return false;
     }

    function removeError(){

             $("div#validation-errors").css("display", "none");
             $("div#validation-errors").empty();
             $('.has-error').each(function(){
                 $(this).removeClass('has-error');
             })

    }

    function setupGroupList(){
        var groupSize = 0,
            gridHeight = 300;
        var groups =new kendo.data.DataSource({
                    autosync:true,
                    transport:{
                      read: function(options){
                               XMPersonManagementController.getProductGroups(
                                      '{!$CurrentPage.parameters.id}',
                                        notificationType,
                                      function(result,event)
                                      {
                                          if (event.status) {
                                              if(result.length > 1){
                                                  options.success(JSON.parse(result));
                                              }
                                              //console.log('groups =>' + JSON.stringify(result));
                                              //console.log('groups size=>' + JSON.parse(result).length);
                                              groupSize = JSON.parse(result).length;
                                              switch (groupSize){
                                                  case 0:
                                                    gridHeight = 200;
                                                    break;
                                                  case 1:
                                                    gridHeight = 200;
                                                    break;
                                                  case 2:
                                                    gridHeight = 300;
                                                    break;
                                                  case 3:
                                                    gridHeight = 300;
                                                    break;
                                                  case 4:
                                                    gridHeight = 400;
                                                    break;
                                                  case 5:
                                                    gridHeight = 500;
                                                    break;
                                                  default:
                                                   gridHeight = 600;
                                                   break;
                                              }
                                              resizeGrid(gridHeight);
                                              hideError();

                                            } else if (event.type === 'exception') {
                                                 $("div#success").css("display", "none");
                                                   displayError(event.message);
                                            } else {
                                                 $("div#success").css("display", "none");
                                                displayError(event.message);
                                            }
                                      },
                                      {escape: false}
                               );
                            },
                        update: function(options){
                            options.success();

                        },
                        destroy: function(options){
                            options.success();
                        }
                      },
                    schema:{
                        model: {
                            Id: "Product",
                            fields: {
                                "Product": {from:"Product", type: "string"},
                                "Cluster": { from: "Cluster", type: "string", },
                                "PartnerPrefix":{from:"PartnerPrefix",type:"string"},
                                "XmattersGroupName" : {from:"XmattersGroupName",type: "string"},
                                "selected":{from:"selected", type:"boolean"}
                        }
                    }
                  }
              });




          var groupGrid =    $("#groupList").kendoGrid({
                  dataSource: groups,
                  scrollable: true,
                  noRecords: true,
                  columns: [
//                      {
//                                field:"selected",
//                                 headerTemplate: '<input type="checkbox" id="header-chb" class="k-checkbox" onclick="selectRow(this);"><label class="k-checkbox-label" for="header-chb">Select</label>',
//                                template: '<input type="checkbox"  class="row-chk" onclick="selectgridRow(this);" # if (selected) { # checked="checked" :  # } #" /> <br /> <input type="checkbox"  class="row-chk" onclick="selectgridRow(this);" # if (selected) { # checked="checked" :  # } #" />',
//                                width:80
//                            },
                            {
                                field:"Product",
                                title:"Product Name",
                                template:'<label class="row-chk" style="font-weight:100;">#: data.Product #</label>'
                            },
                            {
                                field: "Cluster",
                                title: "Cluster"
                            },

                            {
                                field:"Notification",
                                title:"Notification Options",
                                template: '<input type="checkbox"  class = "#=GetDeviceIdByType("1", data)#"   onclick="selectgridRow(this);" # if (isDeviceSelected("Work Email", data)) { # checked="checked" initial-check="true": initial-check="false" # } #"  # if (!isDeviceExist("Work Email")) { # disabled :  # } #"/> <label style="font-weight:100;">Work Email</label><br /><input type="checkbox" class = "#=GetDeviceIdByType("2", data)#" onclick="selectgridRow(this);" # if (isDeviceSelected("Secondary Email", data)) { # checked="checked" initial-check="true": initial-check="false"  # } #" # if (!isDeviceExist("Secondary Email")) { # disabled :  # } #"/><label style="font-weight:100;"> Secondary Email</label><br /><input type="checkbox"  class = "#=GetDeviceIdByType("3", data)#" onclick="selectgridRow(this);" # if (isDeviceSelected("SMS Phone", data)) { # checked="checked" initial-check="true": initial-check="false"  # } # # if (!isDeviceExist("SMS Phone")) { # disabled :  # } #" /><label style="font-weight:100;"> SMS Phone</label>',
                                width:300
                            },
                            {
                                field:"XmattersGroupName",
                                title:"xMatters Group API Name"
                            }

                  ]

              });

    }

    function resizeGrid(gridHeight){
          var gridElement = $("#groupList");
        var dataArea = gridElement.find(".k-grid-content");
        var newHeight = gridHeight;
        var diff = gridElement.innerHeight() - dataArea.innerHeight();
        gridElement.height(newHeight);
        dataArea.height(newHeight - diff);
    }

        var checkedIds = {};
         //on click of the checkbox:
      function selectRow(obj) {
       var checked = obj.checked;

       $("#groupList").find('.row-chk').each(function(idx, item){
            var row = $(item).closest("tr");
            if(checked){
                $(item).prop("checked", true);
                row.addClass("k-state-selected");
                row.removeClass("row-unselect")
            }else {
                $(item).prop("checked", false);
              //-remove selection
              row.removeClass("k-state-selected");
              row.addClass("row-unselect");
            }
        });
      }

    function selectgridRow(obj) {
       var checked = obj.checked,
           row = $(obj).closest("tr"),
           initialCheck = false;


           $(row).children().find("input").each(function(idx, item){
                    var itemCheck = item.checked,
                    itemInitialcheck = $(item).attr("initial-check") == "true" ? true : false;
                    if(itemCheck != itemInitialcheck)
                                initialCheck = true;
           });


       if (initialCheck) {
           $(obj).addClass('selectedCheckbox');
            row.addClass("k-state-selected");
            } else {
            //-remove selection
            $(obj).removeClass('selectedCheckbox');
            row.removeClass("k-state-selected");
       }
     }


     function isDeviceSelected(name, itemData){
        //check to see if the name is in a collection
        if(itemData.Devices != null && itemData.Devices.length > 0){

            for (i = 0; i < itemData.Devices.length; i++) {
               if (itemData.Devices[i].targetName.indexOf(name) > -1){
                    if (itemData.Devices[i].checked == true){
                    return true;
               }
              }
           }
        }
        return false;
     }

    function isDeviceExist(name){
        var hasDevice = false;
        //check to see if the name is in a collection
        if(devices != null && devices.length > 0){
            for (i = 0; i < devices.length; i++) {
               if (devices[i].indexOf(name) > -1){
                    hasDevice = true;
                    break;
               }

           }
        }
        console.log('name =>' + name);
        console.log('hasDevice =>' + hasDevice);
        return hasDevice;
     }


      function GetDeviceIdByType(id, itemData){
        //check to see if the name is in a collection
        var removespclChar = itemData.XmattersGroupName.replace(/[^a-zA-Z0-9]/g, '');
       return removespclChar + "_" + id;
     }


 function SearchProducts (val) {
          var grid = $("#groupList").data("kendoGrid");
          grid.dataSource.query({
            filter:{
              logic:"or",
              filters:[
                {field:"Product", operator:"contains",value:val}
                ]
             }
          });
      }

      function setCheckedFlag(devices, value, inputobj, type){
          var deviceList = new Object() ;
          for(i=0; i < devices.length; i++) {
              if(devices[i].targetName.indexOf(type) !== -1 && $(inputobj).hasClass('selectedCheckbox')){
                  devices[i].checked = value;
                  deviceList = devices[i];

              }
          }

          return deviceList;
      }

      function updateGrouptable(obj){
         var groupSelectionChange = false;
         $("div.k-grid-content").find('.row-chk').each(function(idx, item){
              var row = $(item).closest("tr");
             if($(row).hasClass('k-state-selected')){
                 groupSelectionChange = true;
                 return;
             }
         });

         if(groupSelectionChange){
             $(obj).val($(obj).data("prev"));
             displayError('There are some unsaved changes on the grid. Please save the groups for this notification type first');
              return;
         }

         //notificationType
         if($(obj).val() == 'Maintenance Notification'){
             notificationType = 'MaintType';
         }
         else{
              notificationType = 'eventType';
         }
        $(obj).data("prev",$(obj).val());
         setupGroupList();

      }



  function updateGroups(){
      console.log('checkedIds => ' + checkedIds);
      var grid = $("#groupList").data("kendoGrid");
      var groupData = [];
      var Devices = [];
      var groupSelectionChange = false;
      $('#loading').modal({
                 backdrop: 'static',
                 keyboard: false
            });
      $('#loading').modal('show');

      $("div.k-grid-content").find('.row-chk').each(function(idx, item){
            var row = $(item).closest("tr");
            if($(row).hasClass('k-state-selected')){
                 groupSelectionChange = true;
                dataItem = grid.dataItem(row);
                if(dataItem){
                    var  groupRow = new Object();
                    groupRow.Product = dataItem.Product;
                    groupRow.Cluster = dataItem.Cluster ;
                    groupRow.PartnerPrefix = dataItem.PartnerPrefix;
                    groupRow.XmattersGroupName = dataItem.XmattersGroupName ;
                    groupRow.selected = item.checked;
                    var removespclChar = dataItem.XmattersGroupName.replace(/[^a-zA-Z0-9]/g, '');
                    var devices = []
                    devices.push(setCheckedFlag(dataItem.Devices, $('.'+ removespclChar + '_1').is(':checked'), $('.'+ removespclChar + '_1'), "Work Email"));
                    devices.push(setCheckedFlag(dataItem.Devices, $('.'+ removespclChar + '_2').is(':checked'), $('.'+ removespclChar + '_2'),  "Secondary Email"));
                    devices.push(setCheckedFlag(dataItem.Devices, $('.'+ removespclChar + '_3').is(':checked'), $('.'+ removespclChar + '_3'), "SMS"));
                    groupRow.Devices = devices;
                    groupData.push(groupRow);
                }
            }

        });


      // console.log(JSON.stringify(groupData));
      if(!groupSelectionChange){
          $('#loading').modal('hide');
          displayError('No group selection change was made. Please make a selection to update group subscription');
          return;
      }

      console.log('groupData ++>' + JSON.stringify(groupData));
       XMPersonManagementController.updateGroupSubscription(
          JSON.stringify(groupData),
           '{!$CurrentPage.parameters.id}',
           notificationType,
          function(result,event)
          {
            if (event.status) {
                var returnResult = JSON.parse(result);
                if(returnResult.result != 'Failed'){
                  $('#loading').modal('hide');
                  hideError();
                  $("#header-chb").prop("checked", false);
                  $("div#success").css("display", "block");
                  $("div#success").empty();
                  $('<strong>Batch update was added succesfully.</strong>').appendTo("div#success");
                  $('#warning').modal('show');
                  var grid = $("#groupList").data("kendoGrid");
                  grid.destroy();
                  setupGroupList();
                  $('p.text-primary').removeClass('hiddenText');
               }
               else{
                   $('#loading').modal('hide');
                    $("div#success").css("display", "none");
                   displayError(returnResult.message);
               }
            } else if (event.type === 'exception') {
                $('#loading').modal('hide');
                 $("div#success").css("display", "none");
                 displayError(event.message);
            }else{
                $('#loading').modal('hide');
                 $("div#success").css("display", "none");
                 displayError(event.message);
            }
          },
          {escape: false}
    );

  }


</script>
</apex:page>